#!/bin/bash
shopt -s extglob
_VERSION="0.5.28 (11apr14)";
_vl=4; #Default level of information
_longvl=4;
_svl=2; #Short mode level
_silogloc="/root/.serverinfo.log"
#_logging="auto-prune";

# List of variables to display, if set.
    _defvars=( date \
        hostname \
        ip_addr \
        server \
        loadavg \
        cpu \
        ram \
        vz_shm \
        shmem \
        swap \
        net_link \
        hw_sys \
        uptime \
        kernel \
        os \
        sys_update \
        control \
        cp_uptime \
        cp_update \
        cp_ssl \
        domains \
        vz \
        vzcpu \
        vz_ctcount \
        ownlogins \
        ftp \
        ftp_logins \
        ftp_pasv \
        ssh_port \
        bash \
        gcc \
        perl \
        git \
        apache \
        apache_attack \
        rlimits \
        mem_restrict \
        opt-mods \
        openssl \
        nginx \
        mysql \
        mysql_recover \
        mysql_sanity \
        mysql_config \
        cphulkd \
        named \
        exim \
        exim_domains \
        eximstats \
        postfix \
        php \
        php_rawopts \
        php_conf \
        php_cache \
        alt_php \
        memcached \
        quickinstall \
        c_state \
        high_procs \
        stale_procs \
        high_queries \
        repos \
        firewall \
        bam \
        limits \
        screen \
        vz_ctid \
        forum_post \
        raid_type \
        raid_status \
        disk_status \
        fs_status \
        io_scheduler \
        diskwarn1 \
        diskwarn2 \
        diskwarn3 \
        cooldown \
        uksm \
        vz_migrate \
        vps_beans \
        vpslimit1 \
        vpslimit2 \
        vpslimit3 \
        services \
        mongrel_rails \
        sys_snap \
        other_home \
        dedi_suspend \
        statistics \
        upcp \
        cpbackups \
        psa_backups \
        nas_backup \
        si_lastrun \
        rsync \
        vzpkg \
        easyapache \
        ptr_record \
        nasbox \
        pwtemp \
        cpanel_lic \
        fstab \
        heartbleed \
        vz_cp \
        panel \
        billing \
        last_user \
        users \
        dedi_migrate \
        shared_mig \
        reseller_mig \
        roots \
        root_kit );

# Show header while waiting
waiting () {
    if [[ ! $_output ]]; then
        echo;
        echo "Server Info v$_VERSION - christiantesta@ctesta.com";
        echo "Gathering server information. Please wait...";
    fi;

    # Autoshort detect
    _multiplier="3.6";
    _corecount=$(grep proc /proc/cpuinfo|wc -l);
    _loadnow=$(cat /proc/loadavg|cut -f1 -d' ');
    if [[ ! ${_vv} ]]; then
        if [[ ! $_shortDisplay && ! $_fullDisplay ]]; then
            if [[ -e /usr/bin/bc ]]; then 
                [[ $(echo "$_loadnow < ($_corecount * $_multiplier)"|bc) = 0 ]] && _shortDisplay=1;
            elif [[ -e /bin/awk ]]; then
                [[ $(echo $_loadnow $_corecount $_multiplier|awk '{if($1>($2*$3))print "Yes";}') ]] && _shortDisplay=1;
            fi;
        #[[ $_shortDisplay && ! $_fullDisplay ]] && _vl=$_svl
        fi;
        [[ $_shortDisplay && ! $_fullDisplay ]] && _vl=$_svl
        [[ ! $_shortDisplay && $_fullDisplay ]] && _vl=$_longvl
    fi;
    
    # Wait message
    if [[ ! $_debug ]]; then
        [[ ( $_fullDisplay || ! $_shortDisplay ) && ! $_output ]] && echo -ne "\nTaking too long? Get less with \"-s\".\r\e[1A";
        [[ $_shortDisplay && ! $_output ]] && echo -ne "\nNeed more? Run with \"-f\".\r\e[1A";
    elif [[ ! $_output ]]; then
        echo;
        echo "Verbosity level = ${_vl}";
        echo "Autodetect multiplier = ${_multiplier}";
        if [[ ! ${_logging} ]]; then
            echo "Logging = disabled";
        else
            echo "Logging = ${_logging}";
        fi;
        echo "Log location = ${_silogloc}";
        echo;
    fi; 
}


# Exit early, but still show what we've gathered
sadFace () {
    trap - INT;
    wipe;
    displayInfo;
    set +x;
    exit 0;
}


# Do the fancy status overwriting thing - requires one parameter.
status() {
    local _stuff="$1";
    if [[ ! $_output ]]; then
        if [[ ! $_debug ]]; then
            echo -ne "\r\e[K  $_stuff" >&2;
        else
            echo "  $_stuff";
        fi;
    fi;
}


# Display "help" and options.
displayHelp(){
    echo; 
    #echo "  There is no help yet, but I'm adding this very shortly. Try checking in a few days.";
    cat << WAZOW
    
    ServerInfo v${_VERSION} - christiantesta@ctesta.com
    
    -v[vvvv]    Increase amount of information gathered. More v's is more informartion.
    -[1-5]      Same as -v, except uses number. ie: -3 = -vvv
    -l [list]   Displays only the sections from the comma separated list option          
    -C          Check cPanel license expiration
    -f          Force full output. 
    -s          Force short output
    -b          Bare output - strip all colour
    -h          This help
    -T          Show execution time
    -L [file]   Log run to [file] or [off] to disable
    -E          Output environment variables
    -J          JSON compatible output

WAZOW

    echo;
}


# I'm not currently using this. Is here for testing.
timeout(){
    (
        #_apid=$(ps ax|grep '/usr/sbin/httpd -M'|cut -f1 -d\ );
        _timeOut=3;
        _interval=1;
        _delay=1;
        while ((_timeOut > 0)); do
            sleep $_interval;
            kill -0 $$ || return;
            ((_timeOut -= _interval));
        done;

        # Be nice, post SIGTERM first.
        kill -s SIGTERM $$ && kill -0 $$ || return;
        sleep $_delay;
        kill -s SIGKILL $$;
    ) 2> /dev/null &
    exec "$@";
}

# Parse command line options
getOpts(){
    while true; do
        case "$1" in
            -h|--help) displayHelp; exit 0;;
            -L|--log) _logging=2;
                    if [[ $2 == "no" || $2 == "off" ]]; then
                        unset _logging;
                    else
                        _silogloc="$2";
                        [[ ! ${_silogloc:0:1} == "/" ]] && _silogloc="./${_silogloc}";
                    fi;
                    shift 2;;
            -s|--short) _shortDisplay=1;unset _fullDisplay ;shift;;
            -f|--full) _fullDisplay=1;unset _shortDisplay ;shift;;
            -C|--cpanel-lic) _cplicchk=1;shift;;
            -E|--output-env) _output="env";_nocolour=1;shift;;
            -J|--output-json) _output="json";_nocolour=1;shift;;
            -l|--list) if [[ ! $2 || $2 =~ ^- ]]; then
                    echo;
                    i=0;
                    for v in ${_defvars[@]}; do
                        printf "  %-14s" "$v";
                        ((i++))
                        if [[ $i -eq 3 ]]; then
                            echo;
                            i=0;
                        fi;
                    done;
                    [[ $i -ne 0 ]] && echo;
                    echo;
                    exit;
                else 
                    vars=( ${2//,/ } );_vl=0;shift 2;
                fi;; 
            -1|-v) _vl=1;_fullDisplay=1;unset _shortDisplay;_vv=1;shift;;
            -2|-vv) _vl=2;_fullDisplay=1;unset _shortDisplay;_vv=1;shift;;
            -3|-vvv) _vl=3;_fullDisplay=1;unset _shortDisplay;_vv=1;shift;;
            -4|-vvvv) _vl=4;_fullDisplay=1;unset _shortDisplay;_vv=1;shift;;
            -5|-vvvvv) _vl=5;_fullDisplay=1;unset _shortDisplay;_vv=1;shift;;
            -T|--timer) _timer=1;shift;;
            --nocolour|--nocolor|-b) _nocolour=1;shift;;
            --debug) _debug=1;shift;;
            --debug-verbose) set -x;shift;;
            --1337) _1337=1;shift;;
            --) shift; break;;
            *) break;;
        esac;
    done;
}


# Gather server information
getInfo() {
    status "Getting basics";
    ipaddr=$(hostname -i 2>/dev/null);
    _ip_addr="${ipaddr}";
    ip_addr="${_ip_addr/.255/\e[1m.255\e[0m}";
#    [[ $ipaddr && -x /sbin/ip ]] && _ip_addr="$(/sbin/ip addr show eth0 2>/dev/null|awk '/inet/{gsub(/\/.*/,"",$2);print $2}') / ${ipaddr}";
    date="$(date|awk '{if($5!~/CST|CDT/)$5="\033[36m"$5"\033[0m";print}') ($(date +%z))";
    epoch="$(date +%s)";
    hostname="$HOSTNAME";

    # Get Server Type
    #if [[ $_vl -ge 1 || ( $_vl -eq 0 && ( "${vars[@]}" =~ "server" || "${vars[@]}" =~ "vps_beans" || "${vars[@]}" =~ "vz_shm" ) ) ]]; then
    if [[ $_vl -ge 1 || $_vl -ge 0 ]]; then
        status "Getting server type";

        # Check for SEO first
        if [[ $(grep -o "1;33m" /etc/bashrc 2>/dev/null) == '1;33m' ]]; then _stype="s"; server="\e[0;36mSEO\e[0;m"; 

        # Test for Temporary
        elif [[ $HOSTNAME == "temporary.websitewelcome.com" ]]; then _stype="s"; server="\e[0;36mTemporary\e[0;m";

        # Check for VZ hardware node
        #elif [[ $HOSTNAME =~ ^vps[0-9]+\.hostgator\.com$ && $(grep -om1 "ulhg-" /etc/bashrc 2>/dev/null) == 'ulhg-' ]]; then _stype="h"; server="\e[0;36mVPS Hardware Node\e[0;m - Provo";
        elif [[ $HOSTNAME =~ ^vps[0-9]+\.hostgator\.com$ ]]; then _stype="h"; server="\e[0;36mVPS Hardware Node\e[0;m";
        elif [[ $HOSTNAME =~ ^vps[0-9]+\.hostgator\.com\.tr ]]; then _stype="h"; server="\e[0;36mVPS Hardware Node\e[0;m - Turkey";
        elif [[ $HOSTNAME =~ ^vps[0-9]+\.hostgator\.com\.br ]]; then _stype="h"; server="\e[0;36mVPS Hardware Node\e[0;m - Brazil";

        # Check for NAS box
        elif [[ $HOSTNAME =~ ^nas[0-9]+\.hostgator\.com$ ]]; then _stype="n"; server="\e[0;36mNAS\e[0;m";

        # Check for Crashgator
        elif [[ $HOSTNAME == "r6a.r6an.com" ]]; then _stype="v"; server="\e[0;36mCrashgator\e[0;m";

        # Next get VPS and special VPS out of the way
        elif [[ $(df 2>/dev/null|grep vzfs) ]]; then {
            _stype="v";
            if [[ $HOSTNAME =~ \.elitegator\.com$ ]]; then server="\e[0;36mTesting Sandbox (VPS)\e[0;m";
            elif [[ $HOSTNAME =~ ^wildcard\. ]]; then server="\e[0;36mWildcard\e[0;m";
            else server="\e[0;36mVPS\e[0;m";
            fi;
        }
    
        # Then check for various types of standard shared servers, wizard, and HW node
        elif [[ $HOSTNAME =~ \.hostgator\. ]]; then {
            _stype="s"
            if [[ $HOSTNAME =~ ^wizard ]]; then server="\e[0;36mWizard\e[0;m - Internal";
            elif [[ $HOSTNAME =~ ^workstation ]]; then server="\e[0;36mWorkstation\e[0;m - Internal";_stype="w";
            elif [[ $HOSTNAME =~ ^minidedi[0-9]+\. ]]; then server="\e[0;36mMini Dedicated\e[0;m";
            elif [[ $HOSTNAME =~ \.in ]]; then server="\e[0;36mShared\e[0;m - India";
            elif [[ $HOSTNAME =~ \.br ]]; then server="\e[0;36mShared\e[0;m - Brazil";
            elif [[ $HOSTNAME =~ \.tr ]]; then server="\e[0;36mShared\e[0;m - Turkey";
            elif [[ $HOSTNAME =~ ^gator1227\. ]]; then server="\e[0;36mBlog Factory\e[0;m";
            elif [[ $HOSTNAME =~ ^gator1482\. ]]; then server="\e[0;36mMattieBlaze\e[0;m";
            elif [[ $HOSTNAME =~ ^gator1870\. ]]; then server="\e[0;36mAdCafe\e[0;m";
            elif [[ $HOSTNAME =~ ^toolbox\. ]]; then server="\e[0;36mToolbox\e[0;m - Internal";
            elif [[ $HOSTNAME =~ ^sitebuilder\. ]]; then server="\e[0;36mSite-Builder\e[0;m";
            else server="\e[0;36mShared\e[0;m";
            fi;
        }
        elif [[ $HOSTNAME =~ \.prodns\. ]]; then _stype="s"; server="\e[0;36mShared\e[0;m - Brazil";
        elif [[ $HOSTNAME =~ \.webhostsunucusu\.com ]]; then _stype="s"; server="\e[0;36mShared\e[0;m - Turkey";
    
        # Then check the various reseller and special servers
        elif [[ $HOSTNAME =~ \.websitewelcome\. ]]; then {
            _stype="s";
            if [[ $HOSTNAME =~ ^sitestudio\. ]]; then server="\e[0;36mSite-Studio\e[0;m";
            elif [[ $HOSTNAME =~ ^sitebuilder\. ]]; then server="\e[0;36mSite-Builder\e[0;m";
            elif [[ $HOSTNAME =~ ^ham[0-9]?\. ]]; then server="\e[0;36mHam\e[0;m - Internal";
            elif [[ $HOSTNAME =~ ^gateway[0-9]+\. ]]; then server="\e[0;36mMail Gateway\e[0;m - Internal";
            else server="\e[0;36mReseller\e[0;m";
            fi;
        }
        elif [[ $HOSTNAME =~ \.websitedns\. ]]; then _stype="s"; server="\e[0;36mReseller\e[0;m - India";
        elif [[ $HOSTNAME =~ istanbul\.webhostsunucusu\.com ]]; then _stype="s"; server="\e[0;36mReseller\e[0;m - Turkey";

        # Still here? Must be a dedicated server.
        else _stype="d"; server="\e[0;36mDedicated\e[0;m";
        fi;

    if [[ $(echo $_ip_addr|grep -E '192\.185\.') || $(echo ${HOSTNAME}|grep -E '^gator4[0-9]{3}') ]]; then
        server="$server - CyrusOne";
        _dc="c";
    elif [[ $(echo $_ip_addr|grep -E '142\.4\.([0-9]|(1[0-9]|2[0-9]|3[0-1]))\.|192\.(232|254)') || $(echo $_ip_addr|grep -E '198\.') || -b /dev/vda || $(echo ${HOSTNAME}|grep -E '^(gator[23]|web2)[0-9]{3}') ]]; then
        server="$server - Provo";
        _dc="p";
    else
        server="$server";
        _dc="s";
    fi;

    fi;
    

    # Detect account levels
    if [[ $_vl -ge 3 || ( $_vl -eq 0 && "${vars[@]}" =~ "server" ) ]]; then
        status "Detecting account level";

        # Detect VPS Level 
        if [[ $_stype == "v" ]]; then
            _tmem=$(free -m|awk '/Mem:/{print $2}');
            #Old Levels
            if [[ $_tmem == "384" ]]; then _lvl=1;
            elif [[ $_tmem == "576" ]]; then _lvl=2;
            elif [[ $_tmem == "768" ]]; then _lvl=3;
            elif [[ $_tmem == "1344" ]]; then _lvl=4;
            elif [[ $_tmem == "1824" ]]; then _lvl=5;
            elif [[ $_tmem == "2304" ]]; then _lvl=6;
            elif [[ $_tmem == "3168" ]]; then _lvl=7;
            elif [[ $_tmem == "3801" ]]; then _lvl=8;
            elif [[ $_tmem == "4435" ]]; then _lvl=9;
            #New levels
            elif [[ $_tmem == "512" ]]; then _lvl=500
            elif [[ $_tmem == "1024" ]]; then _lvl=1000;
            elif [[ $_tmem == "2048" ]]; then _lvl=2000;
            elif [[ $_tmem == "4096" ]]; then _lvl=4000;
            elif [[ $_tmem == "8192" ]]; then _lvl=8000;
            else _lvl=0;
            fi;
            if [[ $_lvl != 0 ]]; then 
                if [[ $_lvl -lt 100 ]]; then _LVL="- Level $_lvl";
                elif [[ $_lvl -ge 100 ]]; then _LVL="- $_lvl";
                fi;
            fi;
            server="$server $_LVL";
        fi;


        # Detect recent Dedi plan
        if [[ $_stype == "d" ]]; then
            _tcpu=$(awk '/model name/{print $7;exit}' /proc/cpuinfo);
            _tmem=$(free -g|awk '/Mem:/{print $2}');

            # SoftLayer Boxes
            if [[ $_tcpu == "X3450" && $_tmem -le 2 ]]; then _dlvl="Basic";
            elif [[ $_tcpu == "X3450" && $_tmem -eq 4 ]]; then _dlvl="Standard";
            elif [[ $_tcpu == "X3470" && $_tmem -eq 4 ]]; then _dlvl="Elite";
            elif [[ $_tcpu == "X3470" && $_tmem -ge 7 ]]; then _dlvl="Pro";
            
            # Provo boxes
            elif [[ $_tcpu =~ "E3-1220L" ]]; then _dlvl="Basic";
            elif [[ $_tcpu =~ "E3-1265L" && $_tmem -le 4 ]]; then _dlvl="Standard";
            elif [[ $_tcpu =~ "E3-1265L" && $_tmem -gt 4 ]]; then _dlvl="Elite";
            elif [[ $_tcpu =~ "E3-1230" ]]; then _dlvl="Pro";
            
            else _dlvl=0;
            fi;
            if [[ $_dlvl != 0 ]]; then server="$server - $_dlvl";
            fi;
    
            # Check for properly suspended dedicated server        
            [[ -e /etc/motd && $(grep "TICKET:" /etc/motd) ]] && dedi_suspend="\e[1;36mSuspended\e[0;m"; 
        fi;
    fi;


    # Check for migrated dedi
    if [[ $_vl -ge 3 || ( $_vl -eq 0 && "${vars[@]}" =~ "dedi_migrate" ) ]]; then
        if [[ $_stype == "d" ]]; then
            status "Checking for migrated dedicated server";
            dedi_migrate="$(awk '/^This is a migrated server.*\.$/{sub(/\.$/,"",$18);printf("\033[36mMigrated server\033[0m - New: \033[1m%s\033[0m",$18)}' /etc/motd)";
            [[ ! ${dedi_migrate} ]] && dedi_migrate="$(ps -o cmd x|awk '/\/root\/rsync-mig/&&/\/root\/.ssh\/kvm/{sub(/.*\ root\@/,"",$0);sub(/\:.*$/,"",$0);if($0)printf("\033[36mMigration in process\033[0m - New: \033[1m%s\033[0m",$0)}')";
            [[ ! ${dedi_migrate} && ${_dc} == "s" && -e /root/rsync-mig ]] && dedi_migrate="\033[36mMigration to Provo\033[0m";
        fi;
    fi;
    

    # Getting local IP
    if [[ $_vl -ge 3 || ( $_vl -eq 0 && "${vars[@]}" =~ "_ip_addr" ) ]]; then
        status "Getting additional IP information";
            if [[ $_ip_addr && -x /sbin/ip ]]; then
            if [[ $_stype != "v" ]]; then
                local _locipaddr="$(/sbin/ip addr show eth0 2>/dev/null|awk '/inet /{gsub(/\/.*/,"",$2);if($2~/^10\./){print $2}}')";
                # local _extipcnt=$(/sbin/ip addr show eth1 2>/dev/null|grep -vE '127\.0\.0\.1|^[0-9]'|grep -c eth1);
                local _extipcnt=$(/sbin/ip addr 2>/dev/null|awk '/inet /&&!/127\.0\.0\.1/{gsub(/\/.*/,"",$2);if($2!~/^10\./){c++}}END{print c}');
                [[ $_locipaddr ]] && _ip_addr="${_locipaddr} / ${_ip_addr}";
            else 
                local _extipcnt=$(/sbin/ip addr show venet0 2>/dev/null|grep -vE '127\.0\.0\.1|^[0-9]'|grep -c venet0);
            fi;
            [[ $_extipcnt -gt 0 ]] && _ip_addr="${_ip_addr} (IPs:${_extipcnt})";
        fi;
    fi;    

    # Get last time serverinfo was ran
    #if [[ $_vl -ge 1 || ( $_vl -eq 0 && "${vars[@]}" =~ "si_lastrun" ) ]]; then
    #    status "Getting last runtime of serverinfo";
    #    if [[ -e ${_silogloc} ]]; then
    #        si_lastrun="$(date -d"$(stat -c%y ${_silogloc})" 2>/dev/null)" || si_lastrun="$(stat -c%y ${_silogloc})"
    #    fi;
    #fi;

    # Currently logged in users
    if [[ $_vl -ge 3 || ( $_vl -eq 0 && "${vars[@]}" =~ "users" ) ]]; then
        status "Getting current user";
        users="$(ps -C bash e|grep -vE "${RUSER}|TERM=screen"|grep -oP '((?<=RUSER=)[a-z]+)' 2>/dev/null|sort -u|tr '\n' ','|sed -e's/\,$/\n/' -e's/\,/\,\ /g')";
    fi;


    # Get last user to log in
    if [[ $_vl -ge 3 || ( $_vl -eq 0 && "${vars[@]}" =~ "last_user" ) ]]; then
        status "Getting last user";
        if [[ $_stype = +(h|s) && -e /root/.bash_history ]]; then {
            last_user=$(grep -oP '(?<=USER\ BEGIN\ ).*$' /root/.bash_history 2>/dev/null|sed -e'$!{h;d;}' -ex -e's/cwd\=//');
            _lutime=$(grep -B1 "USER BEGIN ${last_user%%\ *}" /root/.bash_history|sed -e'$!{h;d;}' -ex -e's/^\#//'|xargs -i date -d@{} +"%d%b%y %l:%M%P" 2>/dev/null);
            if [[ "$_lutime" ]]; then last_user="$last_user @ $_lutime"; fi;
        } fi;
    fi;


   # Check NAS box assigned to server. Thanks dwilliamson for adding the safe query method to assign.php
    if [[ $_vl -ge 5 || ( $_vl -eq 0 && "${vars[@]}" =~ "nasbox" ) ]]; then
        if [[ ! $_stype == "v" && ! $_stype == "d" && ! $_stype == "w" ]]; then
            status "Check NAS box assignment";
            _p1='^((vps|gator)[0-9]+\.hostgator|.*\.websitewelcome)\.com(|\.(in|tr|br))'
            _p2='^(ham[0-9]*|wildcard|nas)\.(websitewelcome|hostgator)\.com'
            if [[ ${HOSTNAME} =~ ${p1} ]]; then
                read -r _nasbox _nashome <<<$(GET http://nas.hostgator.com/assign.php?query=${HOSTNAME});
                [[ ${_nasbox} || ${_nashome} ]] && nasbox="IP: ${_nasbox} - Home: ${_nashome}";
            fi;
        fi;
    fi;



    # Check for system-snapshot
    if [[ $_vl -ge 3 || ( $_vl -eq 0 && "${vars[@]}" =~ "sys_snap" ) ]]; then
        status "Check for system-snapshot";
        if [[ ! $_stype == "s" && ! $_stype == "w" ]]; then 
            if [[ -e /root/sys-snap.sh && "$(ps ax|grep -v grep|grep '/root/sys-snap.sh')" ]]; then 
                sys_snap="Running (Old)"; 
                [[ -e /root/system-snapshot/.syssnap_dont_autokill ]] && sys_snap="$sys_snap - Forever";
            elif [[ -e /root/bin/sys-snap && "$(ps ax|grep '[p]ython /root/bin/sys-snap')" ]]; then
                sys_snap="Running (Syssnappy)";
            elif [[ -d /root/system-snapshot ]]; then 
                sys_snap="(Old) $(\ls -lt /root/system-snapshot/*.log 2>/dev/null|head -1|awk '$0{printf("Last log: %s %s %s",$6,$7,$8)}')";
            elif [[ -e /etc/sys-snap.conf && -d $(awk '/^log_dir/{print $3}' /etc/sys-snap.conf)/SYS-SNAP ]]; then
                sys_snap="(Syssnappy) $(\ls -lt $(awk '/^log_dir/{print $3}' /etc/sys-snap.conf)/SYS-SNAP/*/*.txt 2>/dev/null|head -1|awk '$0{printf("Last log: %s %s %s",$6,$7,$8)}')";
            fi;
        fi;
    fi;

    # Get kernel information
    if [[ $_vl -ge 1 || ( $_vl -eq 0 && "${vars[@]}" =~ "kernel" ) ]]; then
        status "Getting kernel information";
        _kr="$(uname -r)";
        _kv="$(uname -v|cut -f1 -d\ )";
        [[ ! ${_kr} =~ [pP][aA][eE] && ${HOSTTYPE:0:1} == "i" ]] && nopae=1;
        [[ ${HOSTTYPE:0:1} == "i" ]] && _kt='\033[36m'
        kernel="${_kr} - Rev:${_kv} - Arch:${_kt}${HOSTTYPE}\033[0m";
        [[ ${nopae} ]] && kernel="${kernel} (No PAE)";
        kernel="$(echo "${kernel}"|sed 's/centos\.plus/\\033[1m&\\033[0m/')";
        if [[ ${_kr} == "3.2.34" && ${_kv} == "#8" ]]; then
            kernel="${kernel} (\e[1;37mBadSymPatch\e[0m)";
        fi
    fi;


    # Get CPU information
    if [[ $_vl -ge 1 || ( $_vl -eq 0 && ( "${vars[@]}" =~ "loadavg" || "${vars[@]}" =~ "cpu"  ) ) ]]; then 
        status "Get CPU information";
        _lpcnt="$(echo "$_corecount $_loadnow"|awk '{printf("%i",(($2/$1)*100))}'|sed 's/\..*$//')% - ";
        loadavg="$_lpcnt\e[0;36m$(cat /proc/loadavg|cut -f1-3 -d' ')\e[0;m";
        cpu="$(grep model\ name /proc/cpuinfo|head -n1|cut -c14-|column -t|sed 's/  / /g') - \e[0;36m$_corecount\e[0;m threads";
        [[ $_stype == "s" && "$(echo -e "3.2.28 #4\n${_kr} ${_kv}"|sort -V 2>/dev/null|head -n1)" == "3.2.28 #4" ]] && loadavg="$loadavg (BSD)"
    fi;

    #Get RAM information
    if [[ $_vl -ge 1 || ( $_vl -eq 0 && "${vars[@]}" =~ "ram" ) ]]; then
        status "Get RAM information";
        _rsoft=$(free -m|awk '/cache:/{print $3}');
        _rmax=$(free -m|awk '/Mem:/{print $2}');
        _rpcnt="$(echo "$_rsoft $_rmax"|awk '{printf("%i",(($1/$2)*100))}'|sed 's/\..*$//')% - "; 
        ram="$_rpcnt\e[0;36m$_rsoft\e[0;m/\e[0;36m$_rmax\e[0;m MB used (soft)";
        [[ $(free -m|awk '/Swap:/{print $3}') -gt 0 ]] && swap="$(free -m|awk '/Swap:/{printf("%i%% - %i/%i MB used\n",(($3/$2)*100),$3,$2);}')";
    fi;

    # Get Uptime
    if [[ $_vl -ge 1 || ( $_vl -eq 0 && "${vars[@]}" =~ "uptime" ) ]]; then 
        status "Getting uptime";
        uptime="$(uptime|sed -e's/\ \ /\ /g' -e's/.*up //' -e's/\,.*//')";
    fi;

    # Detect distribution and version
    if [[ $_vl -ge 2 || ( $_vl -eq 0 && "${vars[@]}" =~ "os" ) ]]; then
        status "Detecting distribution";
        if [[ -e /etc/redhat-release ]]; then
            os="$(awk '{if($3~/4\.[0-9]/)$3="\033[1m"$3"\033[0m";print}' /etc/redhat-release)";
            os="$(echo "${os}"|sed 's/CloudLinux\ Server/\\033[1m&\\033[0m/')";
        elif [[ $(which lsb_release 2>/dev/null) ]]; then os="$(lsb_release -d|sed -e's/.*://' -e's/.*\=//' -e's/^[ \t]*//g' -e's/\"//g')";
        fi;
    fi;

    # Check for other-than-root root user
    if [[ $_vl -ge 3 || ( $_vl -eq 0 && "${vars[@]}" =~ "roots" ) ]]; then
        status "Checking for comped root";
        roots="$(awk -F\: '$3==0&&$1!="root"{printf("\033[1;36m%s\033[0m, ", $1)}' /etc/passwd|sed -e's/[\ ]*$//g' -e's/\,$//')";
    fi;

    # Check for root-kit, comped sshd or libs
    #if [[ $_vl -ge 3 || ( $_vl -eq 0 && "${vars[@]}" =~ "root_kit" ) ]]; then
    #    status "Checking for simple exploited sshd or libs";
    #    [[ $(rpm -qfV /lib*/libkeyutils* /usr/sbin/sshd|awk '$2!="c"') ]] && root_kit="\033[1;36mAltered libkeyutils or sshd\033[0m";
    #fi;

    # detect last system update time
    if [[ $_vl -ge 5 || ( $_vl -eq 0 && "${vars[@]}" =~ "sys_update" ) ]]; then
        status "Checking time of last system update";
        if [[ -e /var/log/yum.log ]]; then 
            sys_update=$(date -d"$(stat -c%y /var/log/yum.log)" 2>/dev/null) || sys_update=$(stat -c%y /var/log/yum.log);
        fi;
    fi;
    
    # Detect Control Panel    
    #if [[ $_vl -ge 3 || ( $_vl -eq 0 && ( "${vars[@]}" =~ "control" || "${vars[@]}" =~ "php_conf" ) ) ]]; then
    if [[ $_vl -ge 3 || $_vl -ge 0 ]]; then
        if [[ ${USER} == "root" && ! $_stype == "h" ]]; then
            status "Detecting control panel";
            if [[ -d /usr/local/cpanel && -d /usr/local/psa ]]; then {
                    control="\e[0;36mcPanel and Plesk\e[0;m - WARNING";
            }
            elif [[ -e /usr/local/psa/bin/product_info ]]; then {
                _ctype="p";
                control="\e[0;36mPlesk\e[0;m";
                #[[ -n "$(ps faux|grep '/usr/local/psa/admin/bin/aut[o]installer')" ]] && control="${control} \e[1m- INSTALLER RUNNING\e[0m" || control="${control} - $(/usr/local/psa/bin/product_info -h 2>/dev/null|awk '/Version:/{print $2}')";
                [[ -n "$(ps faux|grep '/usr/local/psa/admin/bin/aut[o]installer')" ]] && control="${control} \e[1m- INSTALLER RUNNING\e[0m" || control="${control} - $(awk '{print $1, $NF}' /usr/local/psa/version) MU #$(awk -F\" '/patch version/{print $2}' /root/.autoinstaller/microupdates.xml)";
            }
            elif [[ -e /usr/local/cpanel/cpanel ]]; then {
                _ctype="c";
                control="\e[0;36mcPanel\e[0;m";
                if [[ -n "$(ps faux|grep '[c]Panel install')" || $(ps x|grep [c]pinstall) ]]; then
                    control="${control} - \e[1mINSTALLER RUNNING\e[0m"
                else
                    local _cpanelVersion="$(/usr/local/cpanel/cpanel -V 2>/dev/null)";
                    local _cpanelTier="$(grep -oP '(?<=CPANEL=).*' /etc/cpupdate.conf|tr '[a-z]' '[A-Z]')";
                    if [[ $_cpanelVersion ]]; then
                        control="${control} - ${_cpanelVersion} ${_cpanelTier}";
                    else
                        control="${control} - \e[1mINSTALLATION FAILURE\e[0m";
                    fi;
                fi;
            }
            elif [[ $(chkconfig --list webmin 2>/dev/null) ]]; then {
                _ctype="w";
                control="\e[0;36mWebMin\e[0;m";
                control="${control} - $(cat /usr/libexec/webmin/version 2>/dev/null)";
            }
            elif [[ -e /opt/lampp/lampp ]]; then {
                _ctype="x";
                _prefixing="/opt/lampp/bin/";
                control="\e[0;36mXAMPP\e[0;m";
                control="${control} - $(/opt/lampp/lampp version|sed 's/.* //')";
            }
            else control="\e[0;36mNone\e[0;m";
            fi;
        fi;
    fi;
    #VZ Links
    if [[ $_vl -ge 3 || ( $_vl -eq 0 && "${vars[@]}" =~ "vz_cp" ) ]]; then
        status "Getting VZ links";
        if [[ $_stype == "v" ]]; then
            [[ $_ctype = +(p|c) ]] && vz_cp="https://$ipaddr:4643/vz/cp";
            if [[ $_ctype == "p" ]]; then 
                _vz_pass="$(cat /etc/psa/.psa.shadow)";
                vz_cp="$vz_cp - pass: $(cat /etc/psa/.psa.shadow)";
            fi;
        elif [[ $_stype == "h" ]]; then
            vz_cp="http://monitor.hostgator.com/pages/vps_monitor/go.php?s=${HOSTNAME}";
        fi;
    fi;

    # Get control panel links
    if [[ $_vl -ge 3 || ( $_vl -eq 0 && "${vars[@]}" =~ "panel" ) ]]; then 
        status "Getting control panel links";
        if [[ $_stype != "s" && ! $_stype == "h" && $_ctype == "c" ]]; then 
            panel="https://$ipaddr:2087";
        elif [[ $_ctype == "p" ]]; then
            _panel_pass="$(/usr/local/psa/bin/admin --show-password 2>/dev/null)";
            [[ ! $_panel_pass && $_vz_pass ]] && _panel_pass=$_vz_pass;
            panel="https://${ipaddr}:8443/login_up.php3?login_name=admin&passwd=$(echo ${_panel_pass}|sed 's/[\&\!\#]/\\&/g')";
            #panel="https://$ipaddr:8443";
            #panel="$panel - pass: $_panel_pass";
        fi;
    fi;

    # Check installed memory size
    # Works the majourity of the time. 
    if [[ $_vl -ge 3 || ( $_vl -eq 0 && "${vars[@]}" =~ "ram" ) ]]; then
        if [[ $_stype == "d" && -r /dev/mem ]]; then
            status "Checking installed RAM";
            ram="${ram} ($(dmidecode -t 17|awk -v m=${_rmax} '/Size:/&&$2!~/[^0-9]/{t+=$2}END{if(m<(t*0.8))printf("\033[1m%i\033[0m",t); else printf("%i",t)}') MB installed)";
        fi;
    fi;


    # Check for number of root logins
    if [[ $_vl -ge 5 || ( $_vl -eq 0 && "${vars[@]}" =~ "ownlogins" ) ]]; then
        status "Getting number of root logins";
        ownlogins="$USER - $(w -h $USER|wc -l)";
    fi;

    # Test for custom PHP compile options
    if [[ $_vl -ge 4 || ( $_vl -eq 0 && "${vars[@]}" =~ "php_rawopts" ) ]]; then
        if [[ ! $_stype == "s" && ! $_stype == "w" ]]; then
            status "Checking for custom PHP options";
            if [[ $_ctype == "c" && -e /var/cpanel/easy/apache/rawopts/all_php5 ]]; then
                php_rawopts="$(awk 'NF>0{gsub(/--/,"",$1);printf("%s, ",$1);if(NR%3==0)printf("\n                ");}' /var/cpanel/easy/apache/rawopts/all_php5|sed -e's/[\ ]*$//g' -e's/\,$//')";
                [[ $php_rawopts == "enable-sqlite-utf8" ]] && unset php_rawopts;
            fi;
        fi;
    fi;

    # Detect GCC version    
    if [[ $_vl -ge 5 || ( $_vl -eq 0 && "${vars[@]}" =~ "gcc" ) ]]; then
        status "Getting GCC version";
        [[ -e /usr/bin/gcc ]] && gcc="$(gcc --version 2>/dev/null|head -n1|cut -d\  -f3)";
        [[ $gcc ]] && gcc="$gcc" || gcc="Not found";
    fi;

    if [[ $_vl -ge 5 || ( $_vl -eq 0 && "${vars[@]}" =~ "quickinstall" ) ]]; then
        status "Checking QuickInstall";
        [[ -x /bin/rpm && $_ctype == "c" ]] && quickinstall=$(rpm -q quickinstall 2>/dev/null|awk -F- '/^quick/{if(t=="")t=$2"-"$3;else t=t", "$2"-"$3}END{gsub(/\.noarch/,"",t);print t}');
    fi;

    # Detect bash version
    if [[ $_vl -ge 5 || ( $_vl -eq 0 && "${vars[@]}" =~ "bash" ) ]]; then
        status "Getting bash version";
        [[ -e /bin/bash ]] && bash="$(bash --version 2>/dev/null|sed -e'1!d' -e's/.*version //' -e's/ .*//')";
    fi;

    # Detect Perl version
    if [[ $_vl -ge 5 || ( $_vl -eq 0 && "${vars[@]}" =~ "perl" ) ]]; then
        status "Getting perl version";
        _perl="$(perl -v|grep -Eo '([0-9]+\.[0-9]+\.[0-9]+)')";
        #if [[ $_ctype == "c" && ! $_perl == "5.8.8" ]]; then
        #    perl="\e[1m${_perl}\e[0m";
        if [[ $_vl -eq 5 || ( $_vl -eq 0 && "${vars[@]}" =~ "perl" ) ]]; then
            perl="${_perl}";
        else
            unset perl;
        fi;
    fi;


    # Check for Apache version in various known locations
    if [[ $_vl -ge 3 || ( $_vl -eq 0 && "${vars[@]}" =~ "apache" ) ]]; then
        if [[ ${USER} == "root" && ! $_stype == "h" ]]; then
            status "Detecting http server";
            if [[ "$_ctype" == "c" ]]; then _httpdverloc="/usr/local/apache/bin/httpd -v"; 
            elif [[ "$_ctype" == "x" ]]; then _httpdverloc="/opt/lampp/bin/httpd -V";
            else _httpdverloc="httpd -V";
            fi;
            if [[ $(which ${_prefixing}httpd 2>/dev/null) ]]; then 
                _httpdver="$($_httpdverloc 2>/dev/null|awk -F'[/ ]*' '/Server version:/{print $4}')";
                _httpdpids=$(/sbin/pidof httpd httpd.worker httpd.event 2>/dev/null|wc -w)
                apache="${_httpdver}"
                [[ $apache && $_httpdpids -eq 0 ]] && apache="$apache - \e[36mNot Running\e[0m";
                [[ $_httpdpids -gt 0 && $apache ]] && apache="${apache} - Pids:${_httpdpids} - Runtime:$(ps -eo "%U %c %t"|awk '/httpd/&&/root/&& s==0{print $3;s=1;next;}')"; 
            else apache="Not found";
            fi;
        fi;
    fi;

    # Check for running OpenSSL in Apache
    if [[ $_vl -ge 5 || ( $_vl -eq 0 && "${vars[@]}" =~ "openssl" ) ]]; then
        if [[ -x /usr/bin/HEAD ]]; then
            openssl="$(HEAD localhost|grep OpenSSL|sed -e 's/.*OpenSSL\///' -e's/\ .*//')";
        fi;
    fi;

    # Check for nginx version, if running    
    if [[ $_vl -ge 4 || ( $_vl -eq 0 && "${vars[@]}" =~ "nginx" ) ]]; then
        [[ $(ps ax |grep nginx|grep -v grep) ]] && nginx="$(nginx -v 2>&1|cut -d\/ -f2)";
        [[ $nginx ]] && nginx="$nginx";
    fi;

    # Check version of BIND
    if [[ $_vl -ge 4 || ( $_vl -eq 0 && "${vars[@]}" =~ "named" ) ]]; then
        status "Detecting bind";
        [[ -e /usr/sbin/named && $(ps ax|grep '/usr/sbin/[n]amed') ]] && named="$(/usr/sbin/named -v 2>/dev/null|cut -d\  -f2) - Runtime:$(ps -p$(/sbin/pidof named 2>/dev/null) -o'%t' --no-header 2>/dev/null|awk '{print $1}')";
    fi;

    # Check version of MySQL
    if [[ $_vl -ge 3 || ( $_vl -eq 0 && "${vars[@]}" =~ "mysql" ) ]]; then
        if [[ ! $_stype == "h" ]]; then
            status "Detecting MySQL";
            if [[ $(which mysql 2>/dev/null) ]]; then 
                mysql="$(mysql -V 2>/dev/null|cut -d\  -f6|sed 's/\,//')";
                [[ $mysql ]] && mysql="$mysql" || mysql="\033[36mError\033[0m";
                if [[ $(/sbin/pidof mysqld 2>/dev/null) ]]; then
                    mysql="$mysql - Pids:$(/sbin/pidof mysqld 2>/dev/null|wc -w) - Runtime:$(ps -p$(/sbin/pidof mysqld 2>/dev/null) -o'%t' --no-header 2>/dev/null|awk '{print $1}')";
                elif [[ ${USER} == "root" ]]; then 
                    mysql="$mysql - \e[36mNot Running\e[0m";
                fi;
            else mysql="Not found";
            fi;
        fi;
    fi;

    # Extended MySQL configuration sanity check
    # https://projects.hostgator.com/issues/13559#change-45337
    if [[ $_vl -ge 4 || ( $_vl -eq 0 && "${vars[@]}" =~ "mysql_sanity" ) ]]; then
        if [[ ! $_stype == "h" && ! $_stype == "s" && ! $mysql == "Not found" ]]; then
            status "Checking sanity of MySQL";
            if [[ ! -r /etc/my.cnf ]]; then 
                mysql_sanity="\e[36mConfig not readable\e[0m";
            else
                mysql_sanity="$(awk -F'[=[:space:]]' 'function out(pp){n=n", \033[36m"pp"\033[0m"}{gsub(/\ |#.*/,"",$0)}$1=="wait_timeout"&&($NF~/[^0-9]/||($NF>300&&$NF!=3600)){out($1)}$1=="max_connections"{max_conn=$NF;gsub(/[^0-9]/,"",max_conn);if($NF~/[^0-9]/||$NF>300)out($1)}$1=="max_user_connections"{max_uconn=$NF;gsub(/[^0-9]/,"",max_uconn);if($NF~/[^0-9]/)out($1)}$1=="sort_buffer_size"&&$NF!~/[^0-9]/{out($1)}END{if(max_uconn>max_conn)out("max_user_connections");if(n){sub(/^\,\ /,"",n);print n}}' /etc/my.cnf)";
                [[ ${mysql_sanity} ]] && mysql_sanity="Notice: ${mysql_sanity}";
            fi;
        fi;
    fi;

    # Extended MySQL configuration check
    # https://projects.hostgator.com/issues/13559#change-45337
    if [[ $_vl -ge 5 || ( $_vl -eq 0 && "${vars[@]}" =~ "mysql_config" ) ]]; then
        if [[ ! $_stype == "h" && ! $_stype == "s" && ! $mysql == "Not found" ]]; then
            status "Checking sanity of MySQL";
            if [[ ! -r /etc/my.cnf ]]; then
                mysql_config="\e[36mConfig not readable\e[0m";
            else
                mysql_config="$(awk -F'[=[:space:]]' 'function out(pp){n=n", "pp}BEGIN{a[1]="wait_timeout";a[2]="innodb_buffer_pool_size";a[3]="innodb_file_per_table";a[4]="max_user_connections";a[5]="max_connections"}{for(name in a)if($1==a[name]){list[a[name]]=1;next}else if(list[a[name]]!=1)list[a[name]]=0}END{for(thing in list)if(list[thing]==0)out(thing)sub(/^\,\ /,"",n);print n}' /etc/my.cnf)";
                [[ $mysql_config ]] && mysql_config="Unset: ${mysql_config}";
            fi
        fi;
    fi;

    # Check for innodb recovery enabled
    if [[ $_vl -ge 3 || ( $_vl -eq 0 && "${vars[@]}" =~ "mysql_recover" ) ]]; then
        status "Checking MySQL recovery mode";
        if [[ $(which mysql 2>/dev/null) ]]; then
            mysql_recover="$(mysql -Bse 'show variables like "innodb_force_recovery";' 2>/dev/null|awk '$2>0{printf("\033[1;36mInnoDB Force Recovery Enabled\033[0m")}')";
        fi;
    fi;

    # Check cpHulk stuffs
    if [[ $_vl -ge 4 || ( $_vl -eq 0 && "${vars[@]}" =~ "cphulkd" ) ]]; then
        if [[ "$_ctype" == "c" ]]; then
            status "Checking cpHulkd";
            #_cphulkd_log="$(mysql cphulkd -e 'select user from logins' 2>/dev/null|grep -v '^user$'|sort -u|tr '\n' ','|awk 'END{if(NR==0)printf("None");else print;}'|sed -e's/[\ ]*$//g' -e's/\,$//')";
            _cphulkd_log="$(mysql cphulkd -e 'select user from logins' 2>/dev/null|grep -v '^user$'|sort -u|awk '{printf("%s, ",$1);if(NR%3==0)printf("\n                ");}END{if(NR==0)printf("None");}'|sed -e's/[\ ]*$//g' -e's/\,$//')";
            _cphulkd_ips="$(mysql cphulkd -e 'select ip from brutes;' 2>/dev/null|grep -v ^ip$|wc -l)";
            [[ ! $_cphulkd_log == "None" || $_cphulkd_ips -ne 0 ]] && cphulkd="Logins:$_cphulkd_log - IPs:$_cphulkd_ips";
        fi;
    fi;


    # Check VZ cpu allotment
    if [[ $_vl -ge 3 || ( $_vl -eq 0 && "${vars[@]}" =~ "vzcpu" ) ]]; then
        if [[ $_stype == "h" ]]; then
            status "Detecting PHP version";
            [[ $(which vzcpucheck 2>/dev/null) ]] && vzcpu="$(vzcpucheck 2>/dev/null|awk '/^Cur/{cur=$NF}/^Pow/{pow=$NF}END{per=(cur/pow)*100;if(per>100)printf("Overcommitted: ");printf("%i%%",per)}')";
        fi;
    fi;

    #Container count
    if [[ $_vl -ge 5 || ( $_vl -eq 0 && "${vars[@]}" =~ "vz_ctcount" ) ]]; then
        if [[ $_stype == "h" ]]; then
            status "Counting containers";
            vz_ctcount="$(vzlist -aHostatus|awk '/^su/{su++}/^st/{st++}/^ru/{ru++}END{printf("Run:%i - Stop:%i - Susp:%i - Tot:%i\n",ru,st,su,(ru+su+st))}')";
        fi;
    fi;

    # Check primary PHP version
    if [[ $_vl -ge 3 || ( $_vl -eq 0 && "${vars[@]}" =~ "php" ) ]]; then
        if [[ ! $_stype == "h" ]]; then
            status "Detecting PHP version";
            [[ $(which php 2>/dev/null) ]] && php="$(php -v 2>/dev/null|awk '/^PHP/{print $2}')";
            [[ $php ]] && php="$php" || php="Not found";
        fi;
    fi;

    # Check current cPanel PHP handler
    if [[ $_vl -ge 4 || ( $_vl -eq 0 && "${vars[@]}" =~ "php_conf" ) ]]; then
        status "Detecting PHP configuration";
        if [[ "$_ctype" == "c" ]]; then 
            #php_conf="$((xargs < <(/usr/local/cpanel/bin/rebuild_phpconf --current|sed -e'/PHP4/d' -e'1d' -e's/enabled/On/' -e's/disabled/Off/' -e's/suphp/SuPHP/' -e's/fcgi/FastCGI/' -e's/dso/DSO/' -e's/cgi/CGI/' -e's/none/None/' -e's/.*\:\ //g'))|awk '{printf("Handler:%s - Default:%s - SuEXEC:%s\n", $2,$1,$3);}')"
            php_conf="$((xargs < <(/usr/local/cpanel/bin/rebuild_phpconf --current|sed -e'/^Avail/d' -e'/PHP4/d' -e's/enabled/On/' -e's/disabled/Off/' -e's/suphp/SuPHP/' -e's/fcgi/FastCGI/' -e's/dso/DSO/' -e's/cgi/CGI/' -e's/none/None/' -e's/.*\:\ //g'))|awk '!/^Sorry/{if($2!="SuPHP")$2="\033[1m"$2"\033[0m";printf("Handler:%s - Default:%s - SuEXEC:%s\n", $2,$1,$3);}/^Sorry/{printf("\033[21mPHP not installed with EasyApache\033[0m\n")}')";
            [[ -f /usr/local/lib/php.ini && $php_conf ]] && php_conf="$php_conf - MemLimit:$(awk 'BEGIN{FS="[=;]";}/^memory_limit/{gsub(/[[:space:]]*/,"",$2);print $2;exit}' /usr/local/lib/php.ini)";
            if [[ $(ps faux|grep '[p]hp-fpm: master') || ( $(which php-fpm 2>/dev/null) && $(chkconfig --list php-fpm 2>/dev/null|awk '/on/') ) ]]; then
                php_conf="${php_conf} (\033[36mphp-fpm\033[0m)";
            fi;
        fi;
    fi;

    # Check for side-by-side PHP installation and get version
    if [[ $_vl -ge 4 || ( $_vl -eq 0 && "${vars[@]}" =~ "alt_php" ) ]]; then
        status "Detecting alternate PHP";
        [[ -x /opt/php53/bin/php ]] && alt_php="$(/opt/php53/bin/php -v 2>/dev/null|sed '1!d'|cut -d\  -f2)";
        [[ -x /opt/php54/bin/php ]] && alt_php="${alt_php}, $(/opt/php54/bin/php -v 2>/dev/null|sed '1!d'|cut -d\  -f2)";
        [[ -x /opt/php52/bin/php ]] && alt_php="${alt_php}, $(/opt/php52/bin/php -v 2>/dev/null|sed '1!d'|cut -d\  -f2)";
        [[ -x /opt/php55/bin/php ]] && alt_php="${alt_php}, $(/opt/php55/bin/php -v 2>/dev/null|sed '1!d'|cut -d\  -f2)";
        [[ $alt_php ]] && alt_php="$(echo $alt_php|sed 's/^\,\ //')";
    fi;

    # Check for APC
    if [[ $_vl -ge 4 || ( $_vl -eq 0 && "${vars[@]}" =~ "php_cache" ) ]]; then
        if [[ ! $_stype == "s" && ! $_stype == "w" && ! $_stype == "h" ]]; then
            status "Checking for PHP cacher";
            local _phpini=$(php -i 2>/dev/null|grep php.ini$|sed 's/.*\ //g' );
            if [[ $_phpini ]]; then
                if [[ $(grep -E '^extension(\ |)=(\ |)(\"|)apc.so' $_phpini) ]]; then
                    php_cache="APC";
                    [[ $(grep ^zend $_phpini) ]] && php_cache="$php_cache - Notice:\e[36mZEND\e[0m";
                    [[ $php_conf && $(echo "$php_conf"|awk '{sub(/.*\:/,"",$1);print $1}') == "SuPHP" ]] && php_cache="$php_cache - Notice:\e[36mSuPHP\e[0m";
                elif [[ $(grep -E '^extension(\ |)=(\ |)(\"|)eaccelerator.so' $_phpini) ]]; then
                    php_cache="eAccelerator";
                    [[ $php_conf && $(echo "$php_conf"|awk '{sub(/.*\:/,"",$1);print $1}') == "SuPHP" ]] && php_cache="$php_cache - Notice:\e[36mSuPHP\e[0m";
                elif [[ $(grep -E '^extension(\ |)=(\ |)(\"|)xcache.so' $_phpini) ]]; then
                    php_cache="XCache";
                    [[ $php_conf && $(echo "$php_conf"|awk '{sub(/.*\:/,"",$1);print $1}') == "SuPHP" ]] && php_cache="$php_cache - Notice:\e[36mSuPHP\e[0m";
                fi;
            fi;
        fi;
    fi;        

    # Detect when cPanel last updated
    if [[ $_vl -ge 5 || ( $_vl -eq 0 && "${vars[@]}" =~ "cp_update" ) ]]; then
        if [[ $_ctype == "c" && -e /usr/local/cpanel/version ]]; then
            status "Checking cPanel update time";
            cp_update="$(stat -c'%y' /usr/local/cpanel/version|sed 's/\..*//')";
            if [[ ${cp_update} ]]; then
                local _cpanelUpdate="$(grep -oP '(?<=^UPDATES=).*' /etc/cpupdate.conf|tr '[a-z]' '[A-Z]')"; 
                cp_update="${cp_update} ${_cpanelUpdate}";
            fi;
        fi;
    fi;

    # Show enabled repositories
    if [[ $_vl -ge 4 || ( $_vl -eq 0 && "${vars[@]}" =~ "repos" ) ]]; then
        if [[ ! $_stype == "s" ]]; then
            status "Detecting enabled repositories";
            [[ -d /etc/yum.repos.d/ ]] && repos="$(grep -lE 'enabled(\ |)=(\ |)1' /etc/yum.repos.d/*|sed -e's/.*\///' -e's/\..*//'|sort -u|awk '{printf("%s, ",$1);if(NR%4==0)printf("\n                ");}'|sed -e's/[\ ]*$//g' -e's/\,$//')";
            [[ $repos =~ atomic[(\,|\ )] || $repos == "atomic" ]] && control="${control} \e[0;36m+Atomic\e[0;m";
            [[ -e /etc/yum.repos.d/CentOS-Base.repo && $(awk -F\= '/^\[centosplus\]/{jj=1;next}/^\[/{jj=0}jj&&$1=="enabled"&&$2==1{print}' /etc/yum.repos.d/CentOS-Base.repo) ]] && repos="${repos}, \e[0;36mcentosplus\e[0;m";
        fi;
    fi;

    # User with a lot of processes
    if [[ $_vl -ge 2 || ( $_vl -eq 0 && "${vars[@]}" =~ "high_procs" ) ]]; then
        if [[ ! $_stype == "h" ]]; then
            status "Detecting high user process counts";
            high_procs="$(ps aux|egrep -v '(32...|postfix|apache|zabbix|68|imap|pop3|nobody|root|mailman|avahi|named|dbus|dovecot|mailnull)'|awk '{print $1}'|sort|uniq -c|sort -n|tail -n1|awk '{if($1>5)printf("User:%s - Pids:%i",$2,$1);}')";
        fi;
    fi;

    # Check for stale PHP processes what are owned by init
    if [[ $_vl -ge 2 || ( $_vl -eq 0 && "${vars[@]}" =~ "stale_procs" ) ]]; then
        status "Checking for stale PHP processes";
        stale_procs=$(ps -o pid,ppid -C php|awk '$2==1{c++}END{print c}');
    fi;

    # User with a lot of database queries
    if [[ $_vl -ge 2 || ( $_vl -eq 0 && "${vars[@]}" =~ "high_queries" ) ]]; then
        if [[ ! $_stype == "h" ]]; then
            status "Detecting high user database query counts";
            high_queries="$(mysqladmin proc 2>/dev/null|awk '{print $4}'|grep -Ev '(DELAYED|User)'|grep -E '^[a-zA-Z1-9]'|sort|uniq -c|sort|tail -n1|awk '{if($2!=""){if($1>5){printf("User:%s - Tids:%i",$2,$1);} } }')";
        fi;
    fi;

    # Check c-state on susceptible mainboards
    if [[ $_vl -ge 4 || ( $_vl -eq 0 && "${vars[@]}" =~ "c_state" ) ]]; then
        status "Checking c-state";
        if [[ $_stype == "d" && -e /usr/sbin/dmidecode && -e /proc/acpi/processor/CPU0/power ]]; then
            _bbi="$(/usr/sbin/dmidecode 2>/dev/null|grep -A2 'Base Board Information'|sed -e'3!d' -e's/^.*\:\ //')";
            if [[ $_bbi = +(X8SIT|X8SIE) ]]; then
                if [[ $(cat /proc/acpi/processor/CPU0/power 2>/dev/null|grep 'active state'|sed 's/.*\ //') == "C0" ]]; then c_state="disabled";
                else c_state="\e[0;36menabled\e[0;m - $(cat /proc/acpi/processor/CPU0/power 2>/dev/null|grep 'active state'|sed 's/.*\ //')";
                fi;
            fi;
        fi;
    fi;

    # Check for forum posts about this server ### EXPERIMENTAL (took 0.3 seconds on tests)
    if [[ $_vl -ge 4 || ( $_vl -eq 0 && "${vars[@]}" =~ "forum_post" ) ]]; then
        status "Checking for forum post";
        if [[ ! $_stype == "v" && -x /usr/bin/GET ]]; then
            #local _ua="Mozilla/5.0 (X11; U; Linux i686; $LANG; rv:1.9.1.3) Gecko/20090924 Ubuntu/9.10 (karmic) Firefox/3.5.3";
            local _ua="serverinfo_tool";
            local _site="http://forums.hostgator.com/network-status-f14.html";
            local _ref="http://www.hostgator.com";
            [[ ${_dc} == "p" ]] && local _provo='|Provo';
            forum_post="$(GET -H"User-Agent: $_ua" -t1 http://forums.hostgator.com/external.php?type=RSS2\&forumids=14|head -n500|grep -iEm1 -A2 "(${HOSTNAME%%.*}${_provo})[\ ]*\:|\:[\ ]*(${HOSTNAME%%.*}${_provo})"|sed 's/<[^>]*>//g;s/^[ \t]*//;s/\&.*//;1d;3s/^/                /')";
            if [[ $forum_post =~ ^http ]]; then
                forum_post="\e[0;36m${forum_post}\e[0m";
            else
                unset forum_post;
            fi;
        fi;
    fi;


    # Detect Apache MPM
    if [[ $_vl -ge 4 || ( $_vl -eq 0 && "${vars[@]}" =~ "mpm_type" ) ]]; then
        status "Determining Apache MPM"
        if [[ $_ctype == "c" ]]; then
            ##_rtn=$( ( /bin/awk '/mpm/ {print $1}' <(timeout "httpd -M" 2>&1  ) ));
            #_rtn=$(/bin/awk '/mpm/ {print $1}' <(httpd -M 2>&1 ));
            #case "$_rtn" in 
            #    "mpm_event_module") mpm_type='event';;
            #    "mpm_worker_module") mpm_type='worker';;
            #    "mpm_prefork_module") mpm_type='prefork';;
            #esac;
            #_mpm_type=$(httpd -V >&1 2>/dev/null|sed -ne'/MPM_DIR/s/.*\///p;/MPM:/s/.*\ //gp'|sed 's/\"//');
            _mpm_type=$(httpd -V >&1 2>/dev/null|sed -ne'/MPM:/s/.*\ //gp');
            [[ $_mpm_type == "prefork" || $_mpm_type == "Prefork" ]] && _mpm_type="\033[1;37mprefork\033[0m";
        elif [[ $_ctype == "p" && -e /etc/sysconfig/httpd ]]; then
            source /etc/sysconfig/httpd;
            if [[ $HTTPD ]]; then case "$HTTPD" in 
                "/usr/sbin/httpd.worker") _mpm_type="worker";;
                "/usr/sbin/httpd.event") _mpm_type="event";;
                "/usr/sbin/httpd") _mpm_type="\033[1;37mprefork\033[0m";;
                esac;
            fi;
            #&& mpm_type=${HTTPD##*http.};
            #[[ $mpm_type =~ http$ ]] && mpm_type="prefork";
        fi;
        if [[ $_mpm_type ]]; then
            apache="${apache} - MPM:${_mpm_type}";
        fi;
    fi;


    # Detect firewall
    if [[ $_vl -ge 4 || ( $_vl -eq 0 && "${vars[@]}" =~ "firewall" ) ]]; then
        status "Detecting Firewall";
        if [[ -e /usr/sbin/csf ]]; then firewall="CSF";
        elif [[ -r /usr/sbin/firewall && $(head /usr/sbin/firewalli 2>/dev/null|grep -i hostgator) ]]; then firewall="HG Firewall";
        elif [[ -r /usr/sbin/firewall ]]; then firewall="Firewall";
        elif [[ -e /sbin/iptables ]]; then firewall="IPTables"; 
        fi;
        [[ -r /usr/sbin/firewall || -r /sbin/iptables ]] && _fwrules=$(service iptables status 2>/dev/null|grep -c '^[0-9]');
        if [[ -r /usr/sbin/firewall && $firewall && $_fwrules -le 1 ]]; then firewall="$firewall - \e[0;36mDisabled\e[0m";
        elif [[ $firewall ]]; then firewall="$firewall - Enabled - Rules:$_fwrules";
        else firewall="None";
        fi;
    fi;

    # Check for PTR mismatch
    if [[ $_vl -ge 4 || ( $_vl -eq 0 && "${vars[@]}" =~ "ptr_record" ) ]]; then
        if [[ ! $_stype == "s" ]]; then
            status "Looking for PTR mismatch";
            [[ $(which dig) && $(dig -x $ipaddr +short +time=2 +tries=2 2>/dev/null) != ${HOSTNAME}. ]] && ptr_record="Mismatch";
        fi;
    fi;

    # Detect special opt_mods 
    if [[ $_vl -ge 4 || ( $_vl -eq 0 && "${vars[@]}" =~ "opt_mods" ) ]]; then
        status "Checking for apache optionals";
        if [[ $_ctype == "c" && -d /var/cpanel/easy/apache/custom_opt_mods ]]; then
            opt_mods=$(/bin/ls -dA /var/cpanel/easy/apache/custom_opt_mods/*/ 2>/dev/null|grep -v Cpanel|wc -l);
            [[ $opt_mods == 0 ]] && unset opt_mods ;
        fi;
    fi;

    # Check for expired cPanel license
    if [[ $_vl -ge 4 || ( $_vl -eq 0 && "${vars[@]}" =~ "cpanel_lic" ) ]]; then
        status "Checking cPanel license";
        if [[ $_cplicchk == 1 ]]; then
            local _cpto=5; #timeout
            set -o pipefail;
            [[ $_ctype == "c" && -x /usr/bin/GET && ! $(GET -t${_cpto} "http://www.cpanel.net/apps/verify/index.cgi?ip=$ipaddr" | grep '<tr class="status1"[[:space:]]*>') ]] && cpanel_lic="Expired - \e[0;36mhttp://www.cpanel.net/apps/verify/index.cgi?ip=${ipaddr}\e[0;m";
            set +o pipefail;
        fi;
    fi;

    # Check for active cPanel user backups    
    if [[ $_vl -ge 4 || ( $_vl -eq 0 && "${vars[@]}" =~ "cpbackups" ) ]]; then
        status "Checking for running user backups"
        if [[ $_ctype == "c" ]]; then
            _tmp="$(ps x|grep -oP '(?<=\/usr\/local\/cpanel\/scripts\/pkgacct\ ).*?(?=\ )' 2>/dev/null|tr '\n' ','|sed -e's/\,$/\n/' -e's/\,/\,\ /g')";
            [[ $_tmp ]] && cpbackups="Running:$_tmp";
            [[ ! $tmp ]] && _tmp="$(ps ax|grep -oP '(?<=pkgacct\ -\ ).*?(?=\ -\ )' 2>/dev/null|uniq|tr '\n' ','|sed -e's/\,$/\n/' -e's/\,/\,\ /g')";
            [[ $_tmp ]] && cpbackups="Running:$_tmp";

            #Get date of last cPanel backup:
            if [[ ! $cpbackups && -e /etc/cpbackup.conf ]]; then
                _cpBackLoc="$(grep -oP '(?<=BACKUPDIR\ ).*' /etc/cpbackup.conf 2>/dev/null)";
                if [[ -f ${_cpBackLoc}/cpbackup/daily/cpbackupstatus.cfg ]]; then
                    cpbackups="Last:$(sed 's/.*\=//' ${_cpBackLoc}/cpbackup/daily/cpbackupstatus.cfg|xargs -i date -d@{})";
                elif [[ -f ${_cpBackLoc}/cpbackup/weekly/cpbackupstatus.cfg ]]; then
                    cpbackups="Last:$(sed 's/.*\=//' ${_cpBackLoc}/cpbackup/weekly/cpbackupstatus.cfg|xargs -i date -d@{})";
                elif [[ -f ${_cpBackLoc}/cpbackup/monthly/cpbackupstatus.cfg ]]; then
                    cpbackups="Last:$(sed 's/.*\=//' ${_cpBackLoc}/cpbackup/monthly/cpbackupstatus.cfg|xargs -i date -d@{})";
                elif [[ ! $_stype == "s" && ! $_stype == "w" ]]; then
                    cpbackups="Last:Not Found";
                fi;
            fi;
            if [[ ! $_stype == "s" && ! $_stype == "w" && -e /etc/cpbackup.conf ]]; then
                [[ $cpbackups ]] && cpbackups="$cpbackups - ";
                cpbackups="${cpbackups}Conf:$(awk 'BEGIN{b2="COMPR";}/BACKUPINC/{if($2=="yes")b1="INC";else b1="NoINC";}/COMPRESSACCTS/{if($2=="yes")b2="COMPR";else b2="NoCOMPR";}/BACKUPACCTS/{if($2=="yes")b3="ACCTS";else b3="\033[36mNoACCTS\033[0m";}END{printf("%s/%s/%s",b1,b2,b3);}' /etc/cpbackup.conf)";
            fi;
        fi;
    fi;

    # Check for cPanel statistics runs
    if [[ $_vl -ge 2 || ( $_vl -eq 0 && "${vars[@]}" =~ "statistics" ) ]]; then
        status "Checking for statistics run";
        [[ $_ctype == "c" ]] && statistics=$(ps uax|grep -E 'logrunner.*(analog|webalizer)'|grep -v grep|cut -d\  -f1|uniq|tr '\n' ','|sed -e's/\,$/\n/' -e's/\,/\,\ /g');
    fi;

    # Check for active Plesk backups
    if [[ $_vl -ge 2 || ( $_vl -eq 0 && "${vars[@]}" =~ "psa_backups" ) ]]; then
        status "Checking for domain backups";
        [[ $_ctype == "p" ]] && psa_backups=$(ps ax|grep -oP '(?<=backup-profile-name\=).*?(?=\ )' 2>/dev/null|sort|uniq|tr '\n' ','|sed -e's/\,$/\n/' -e's/\,/\,\ /g');
    fi;

    # Check memcached
    if [[ ( $_vl -ge 4 || ( $_vl -eq 0 && "${vars[@]}" =~ "memcached" ) ) && ! $_stype == "h" ]]; then
        status "Detecting memcached service";
        if [[ $(ps ax|grep [m]emcached) ]]; then
            memcached="Enabled";
            if [[ ! $_stype == "h" ]]; then
                if [[ ! -e /dev/tcp && $(which mknod) ]]; then
                    mknod /dev/tcp c 30 36 2>/dev/null;
                fi;
                if [[ -e /dev/tcp ]]; then
                    _memcached_limit="$(exec 9<>/dev/tcp/127.0.0.1/11211 && echo -e "stats\nquit" >&9 && awk '/\ bytes\ /{b=$3/1048576}/limit_maxbytes\ /{l=$3/1048576}END{printf("%i%% - %.1f %.1f",((b/l)*100),b,l);}' <&9 && exec 9>&-)";
                    memcached="$memcached - $(echo "${_memcached_limit}"|awk 'BEGIN{c1="\033[0m";c2=c1;}{if($2>=128i||$2=="")c2="\033[36m";if($1==0||$1=="")c1="\033[36m";printf("%s%.1f\033[0m/%s%.1f\033[0m MB",c1,$1,c2,$2);}')";
                fi;
            fi;
        fi;
    fi;

    # Detect special services
    if [[ ( $_vl -ge 4 || ( $_vl -eq 0 && "${vars[@]}" =~ "services" ) ) && ! $_stype == "h" ]]; then
        status "Detecting special services";
        _ps="$(ps ax)";
        if [[ $(echo "${_ps}"|grep [t]omcat 2>/dev/null) ]]; then
            services="$services, tomcat";
        else 
            [[ $(echo "${_ps}"|grep [j]ava) ]] && services="$services, java";
        fi;
        [[ $(echo "${_ps}"|grep [c]lamd 2>/dev/null) ]] && services="$services, clam";
        [[ $(echo "${_ps}"|grep [l]shttpd 2>/dev/null) ]] && services="$services, lshttpd";
        [[ $(echo "${_ps}"|grep [v]arnishd 2>/dev/null) ]] && services="$services, varnish";
        [[ $(echo "${_ps}"|grep [s]earchd 2>/dev/null) ]] && services="$services, sphinx";
        [[ $(echo "${_ps}"|grep [s]vnserve 2>/dev/null) ]] && services="$services, subversion";
        [[ $(echo "${_ps}"|grep [p]ostgres 2>/dev/null) ]] && services="$services, postgres";
        [[ ! $_stype == "s" && $(echo "${_ps}"|grep Passenger 2>/dev/null) ]] && services="$services, passenger";
        [[ -e /usr/sbin/nginx ]] && services="$services, nginx";
        [[ $(echo "${_ps}"|grep [m]unin-node 2>/dev/null) ]] && services="$services, munin";
        [[ $(echo "${_ps}"|awk '/java/&&/red5/&&!/awk/') ]] && services="$services, red5";
        [[ $(echo "${_ps}"|awk '/java/&&/rms/&&!/awk/') ]] && services="$services, rms";
        [[ $(echo "${_ps}"|grep [o]penvpn 2>/dev/null) ]] && services="$services, openvpn";
        [[ $(echo "${_ps}"|grep [s]c_serv 2>/dev/null) ]] && services="$services, shoutcast";
        [[ $(echo "${_ps}"|grep 'bin/X' 2>/dev/null) ]] && services="$services, X-server";
        [[ $(echo "${_ps}"|grep [W]owzaMediaServerd 2>/dev/null) ]] && services="$services, wowza";

        services=$(echo $services|sed 's/^\,\ //');
    fi;

    # Look for cPanel updater running
    if [[ $_vl -ge 4 || ( $_vl -eq 0 && "${vars[@]}" =~ "upcp" ) ]]; then
        status "Checking for cPanel updater";
        [[ $_ctype == "c" && $(ps ax|grep upcp|grep -v grep) ]] && upcp="upcp running";
    fi;

    # Look for EasyApache running
    if [[ $_vl -ge 4 || ( $_vl -eq 0 && "${vars[@]}" =~ "easyapache" ) ]]; then 
        status "Checking for EasyApache running";
        [[ $_ctype == "c" && $(ps ax|grep '/scripts/easyapache'|grep -v grep) ]] && easyapache="Running";
    fi;

    # Check SSH port
    if [[ $_vl -ge 4 || ( $_vl -eq 0 && "${vars[@]}" =~ "ssh_port" ) ]]; then
        status "Checking SSH port";
        if [[ ! $_stype == "s" && ! $_stype == "w" && -r /etc/ssh/sshd_config ]]; then
            #ssh_port=$(grep -oP '(?<=^Port\ ).*' /etc/ssh/sshd_config);
            ssh_port=$(awk '/^Port\ /{print $2}' /etc/ssh/sshd_config 2>/dev/null|uniq|tr '\n' ','|sed -e's/\,$/\n/' -e's/\,/\,\ /g');
            [[ $ssh_port == 22 ]] && unset ssh_port;
            [[ $ssh_port ]] && ssh_port="Port:$ssh_port";
        fi;
    fi;

    # Check for vz installer
    if [[ $_vl -ge 4 || ( $_vl -eq 0 && "${vars[@]}" =~ "vzpkg" ) ]]; then
        status "Checking for vzpkg";
        [[ $_stype == "h" ]] && vzpkg="$(ps x| grep 'vzpkg install'|awk '{print $9}'|tr '\n' ','|grep -v '^$'|sed -e's/\,$/\n/' -e's/\,/\,\ /g')";
    fi;

    # Check if LimitPHP limits exist on the server    
    if [[ $_vl -ge 4 || ( $_vl -eq 0 && "${vars[@]}" =~ "limits" ) ]]; then
        status "Checking for LimitPHP enforcements";
        if [[ $_stype == "s" && -d /dev/shm/limit && -x /usr/bin/getent ]]; then 
            #limits=$(/bin/ls -A /dev/shm/limit/|wc -l); 
            limits="$(\ls -A /dev/shm/limit/|while read id;do getent passwd ${id}|sed -e 's/\:.*//';done|awk '{printf("%s, ",$1);if(NR%6==0)printf("\n                ");}'|sed -e's/[\ ]*$//g' -e's/\,$//')";
            [[ $limits == 0 ]] && unset limits ; 
        fi;
    fi;

    # Check for NAS backups running    
    if [[ $_vl -ge 3 || ( $_vl -eq 0 && "${vars[@]}" =~ "nas_backup" ) ]]; then
        status "Checking for NAS backups";
        if [[ $_stype = +(s|h) && $(pgrep backup.pl) ]]; then nas_backup="\e[0;36mRunning\e[0;m";
        elif [[ $_stype = +(s|h) && -f /home/hgbackupdir/backup.log ]] && [[ ! $_shortDisplay || $_fullDisplay ]]; then
            nas_backup="$(tac /home/hgbackupdir/backup.log|grep -m1 'completed - full'|cut -d\  -f2-4)";
        elif [[ $_stype = "v" && -e /.backup_status ]]; then
            nas_backup="$(awk '/status:/{if(/Succeeded/)s=1}/stop:/{sub($1" ","",$0);d=$0}END{if(s&&d)print d}' /.backup_status)";
        fi;
    fi;

    #Check for rsync
    if [[ $_vl -ge 5 || ( $_vl -eq 0 && "${vars[@]}" =~ "rsync" ) ]]; then
        status "Checking for rsync processes";
        rsync=$(($(ps ax|grep -c rsync)-1));
        if [[ $rsync -lt 1 ]]; then 
            unset rsync;
        fi;
    fi;

    # Recently cooldown containers
    if [[ $_vl -ge 4 || ( $_vl -eq 0 && "${vars[@]}" =~ "cooldown" ) ]]; then
        status "Checking container cooldown";
        #[[ $_stype == "h" && -e /opt/hgvps/cooldown.log ]] && cooldown=$(awk -F',' '/^[0-9]/{if($1>(systime()-3600)){print $2;}}' /opt/hgvps/cooldown.log|sort|uniq|tr '\n' ','|sed -e's/\,$/\n/' -e's/\,/\,\ /g')
        [[ $_stype == "h" && -e /opt/hgvps/cooldown.log ]] && cooldown=$(awk -F',' '/^[0-9]+\,/{if($1>(systime()-3600)){print $2;}}' /opt/hgvps/cooldown.log|sort|uniq -c|awk '{printf("%s(%s)",$2,$1)}'|tr '\n' ','|sed -e's/\,$/\n/' -e's/\,/\,\ /g');
    fi;

    # Get CTID
    if [[ $_vl -ge 4 || ( $_vl -eq 0 && "${vars[@]}" =~ "vz_ctid" ) ]]; then
        status "Checking CTID";
        [[ $_stype == "v" && -r /proc/user_beancounters ]] && vz_ctid="$(grep -oP '[0-9]+(?=\:)' /proc/user_beancounters 2>/dev/null)"
    fi;

    # Get RAID type
    if [[ $_vl -ge 4 || ( $_vl -eq 0 && "${vars[@]}" =~ "raid_type" ) ]]; then
        status "Checking RAID type";
        local _regex="(MegaRAID|3ware|Adaptec)";
        [[ ! $_stype == "v" && -x /sbin/lspci && $(/sbin/lspci|grep RAID) =~ $_regex ]] && raid_type=$BASH_REMATCH;
    fi;

    # Get RAID status
    if [[ $_vl -ge 4 || ( $_vl -eq 0 && "${vars[@]}" =~ "raid_status" ) ]]; then
        status "Checking RAID status";
        if [[ ! $_stype == "v" ]]; then
            #local _raid_regex='REBUILDING|DEGRADED';
            if [[ -e /root/3ware/tw_cli ]]; then
                #[[ $(/root/3ware/tw_cli info c0 2>/dev/null) =~ $_raid_regex ]] && raid_status="\e[0;36m${BASH_REMATCH}\e[0;m";
                raid_status=$(/root/3ware/tw_cli info c0 u0 2>/dev/null|grep '^u0\ '|awk '{print $3}' 2>/dev/null);
            elif [[ $raid_type == "Adaptec" && -x /opt/aac-check/arcconf ]]; then
                raid_status=$(/opt/aac-check/arcconf getconfig 1 2>/dev/null|awk '/(Logical device name|Status of logical device).*\:/{if($1=="Logical")printf("%s",$5);else printf(":%s\n",$6);}'|sed -e'1! s/^/                /');
            # MegaRAID is way too slow for this, unfortunately. Must find a better way.
            #elif [[ $raid_type == "MegaRAID" && -x /opt/megactl/megasasctl ]]; then
            #    raid_status=$(/opt/megactl/megasasctl 2>/dev/null|sed -e'2!d' -e's/.*RAID/RAID/' -e's/\ \ /\ /g' -e's/\ optimal/\:\ Optimal/');
            fi;
            if [[ $raid_status == "DEGRADED" || $raid_status == "DEGRADED*" ]]; then
                raid_status="\e[1;36m$raid_status\e[0m";
            fi;
        fi;
    fi;


    # Check for multiple /home partitions
    if [[ $_vl -ge 5 || ( $_vl -eq 0 && "${vars[@]}" =~ "other_home" ) ]]; then
        status "Checking for alternate home partitions";
        if [[ $(\ls -d /home*|wc -w) -gt 1 ]]; then
            other_home="$(\ls -d /home*|tr '\n' ' ')";
        fi;
    fi;


    # Get sda run time
    if [[ $_vl -ge 4 || ( $_vl -eq 0 && "${vars[@]}" =~ "disk_status" ) ]]; then
        status "Checking drive status";
        if [[ $_stype == "d" && ! $_dc == "p" && -x /usr/sbin/smartctl && ! $raid_type == "Adaptec" ]]; then
            #disk_status=$(for _drive in /dev/[vsh]d[a-z]; do echo "${_drive}: Runtime:$(/usr/sbin/smartctl -A ${_drive}|sed -n '/Power_On_Hours/s/.*\ //p'|awk '{if ($1>=14000)printf("\033[1;37m%i\033[0m",$1);else printf("%i",$1);}') - Health:$(/usr/sbin/smartctl -H ${_drive}|grep -oP '(?<=test\ result\:\ ).*$' 2>/dev/null|awk '{if($1!="PASSED")printf("\033[1;36m%s\033[0m",$1);else printf("%s",$1);}')"; done|sed -e'1! s/^/                /');
            disk_status="$(for _drive in /dev/[vsh]d[a-z]; do [[ ${fff} ]] && printf "%16s" "";fff=1;smartctl -a ${_drive}|awk -v dr="${_drive}" 'function sp(){if(ff)printf("%20s","");else ff=1}/overall-health/{health=$NF;if(health!="PASSED")health="\033[1;36m"health"\033[0m"}/Power_On_Hours/{poh=$NF;if(poh>=14000)poh="\033[1;37m"poh"\033[0m"}/Device\ Model/{dm=$3;if($3=="WDC")wd=1}/Raw_Read_Error_Rate/&&wd&&$NF>0{e["Raw_Read_Error_Rate"]="\033[36m"$NF"\033[0m"}/Reallocated_Sector_Ct/&&$NF>0{e["Reallocated_Sector_Ct"]="\033[36m"$NF"\033[0m"}/Offline_Uncorrectable/&&$NF>0{e["Offline_Uncorrectable"]="\033[36m"$NF"\033[0m"}/Current_Pending_Sector/&&$NF>0{e["Current_Pending_Sector"]="\033[1m"$NF"\033[0m"}END{if(!poh)poh="n/a";if(!health)health="n/a";if(!dm)dm="n/a";sp();printf("%8s: Runtime: %s - Health: %s (%s)\n",dr,poh,health,dm);for(er in e){sp();printf("%s: %s\n",er,e[er])}}';done;)";
        fi;
    fi;


    #Check filesystem status
    if [[ $_vl -ge 4 || ( $_vl -eq 0 && "${vars[@]}" =~ "fs_status" ) ]]; then
        status "Checking filesystem status";
        fs_status=$(awk '/\/dev\/[vsh]d[a-z][0-9]/{dd[$1]=1}END{for(disk in dd)print disk}' /proc/mounts|while read dd;do tune2fs -l ${dd}|awk '/Filesystem\ state\:/&&$NF!="clean"{printf("\033[36mFilesystem has errors\033[0m")}';done);
    fi;


    # Check FTP logins
    if [[ $_vl -ge 4 || ( $_vl -eq 0 && "${vars[@]}" =~ "ftp_logins" ) ]]; then
        if [[ ${USER} == "root" && -x /usr/sbin/pure-ftpwho ]]; then
            ftp_logins="$(/usr/sbin/pure-ftpwho -sH|cut -d\| -f2|sort|uniq|grep -v ^\?|tr '\n' ','|sed -e's/\,$/\n/' -e's/\,/\,\ /g')";
        fi;
    fi;

    # Check git
    if [[ $_vl -ge 5 || ( $_vl -eq 0 && "${vars[@]}" =~ "git" ) ]]; then
        status "Checking for git";
        _gitloc=$(which git 2>/dev/null);
        if [[ $_gitloc ]]; then
            git=$(${_gitloc} --version|cut -d\  -f3|grep '^[0-9]');
            [[ $git ]] && git="$git";
        fi;
    fi;

    # Check for eximstats
    if [[ $_vl -ge 3 || ( $_vl -eq 0 && "${vars[@]}" =~ "eximstats" ) ]]; then
        if [[ $_ctype == "c" ]]; then
            status "Check for Eximstats";
            [[ $(echo "${_cpanelVersion}"|awk -F. '{if($1>=11&&$2>=32)print "1";}' 2>/dev/null) && ! $(grep '^skipeximstats=1' /var/cpanel/cpanel.config) ]] && eximstats="Enabled";
        fi;
    fi;


    # Checking for possible attack
    if [[ $_vl -ge 4 || ( $_vl -eq 0 && "${vars[@]}" =~ "apache_attack" ) ]]; then
        status "Checking apache idle workers";
        if [[ $_httpver =~ ^2\. ]]; then
            local _apache_idle=$(GET -t10 localhost/whm-server-status|grep -oP "[0-9]*(?=( idle workers))");
            [[ $_apache_idle -lt 20 ]] && apache_attack="IdleWorkers:${_apache_idle} - Attack";
        fi;
    fi;

    # Check RLimits
    if [[ $_vl -ge 5 || ( $_vl -eq 0 && "${vars[@]}" =~ "rlimits" ) ]]; then
        status "Checking RLimits";
        if [[ $_ctype == "c" ]]; then 
            #rlimits=$(find /usr/local/apache/conf /usr/local/apache/conf/includes -maxdepth 1 -type f -name "*.conf" -exec grep "^RLimit" {} \;|awk 'BEGIN{m=1048576}{if(NR!=1)printf("                ");if($1=="RLimitMEM")printf("%s %.1f/%.1f MB\n",$1,$2/m,$3/m);else printf("%s %i/%i\n",$1,$2,$3);}');
            [[ -e /usr/local/apache/conf && -e /usr/local/apache/conf/includes ]] && rlimits=$(find /usr/local/apache/conf /usr/local/apache/conf/includes -maxdepth 1 -type f -name "*.conf" -exec grep "^RLimit" {} \; 2>/dev/null|awk 'BEGIN{m=1048576}{if(NR!=1)printf("                ");if($1=="RLimitMEM"){printf("%s %.1f",$1,$2/m);if(NF==3)printf("/%.1f MB\n",$3/m);else printf(" MB\n");}else{printf("%s %i",$1,$2);if(NF==3)printf("/%i\n",$3);else printf("\n");}}');
        fi;
    fi;

    # Check memory usage restrictions
    if [[ $_vl -ge 5 || ( $_vl -eq 0 && "${vars[@]}" =~ "mem_restrict" ) ]]; then
        status "Checking RLimits";
        if [[ $_ctype == "c" ]]; then
            [[ -d /var/cpanel/templates && $(grep -R '^RLimitMEM' /var/cpanel/templates/apache*) ]] && mem_restrict="Memory Usage Restriction enabled";
        fi;
    fi;


    # Counting domains
    if [[ $_vl -ge 4  ]]; then
        if [[ $_ctype == "c" && -e /etc/userdomains && -e /etc/trueuserdomains ]]; then
            status "Counting number of domains";
            #domains="Primary:$(cat /etc/trueuserdomains|wc -l) - Addon/Sub:$(cat /etc/userdomains|wc -l)";
            domains="cPanel:$(cat /etc/trueuserdomains|wc -l) - vHosts:$(grep DocumentRoot /usr/local/apache/conf/httpd.conf|grep -vcE '/usr/local/apache|/var/www|rvadmin')";
        fi;
    fi;

    # Extended site count
    if [[ ( $_vl -ge 5 && $domains ) || ( $_vl -eq 0 && "${vars[@]}" =~ "domains" && -e /etc/userdomains && -e /etc/trueuserdomains ) ]]; then
        if [[ ! ${_stype} == "s" ]]; then
            status "Getting extended domains count";
            domains="$(awk 'BEGIN{i=0;}/^\ \ [a-z0-9]/{add++}/^\ \ \-/{subd++}/^main_domain/{main++}END{printf("Primary:%\047i - Addon:%\047i - Sub:%\047i - Total:%\047i",main,add,(subd-add),(main+subd));}' /var/cpanel/userdata/*/main 2>/dev/null)";
        fi;
    fi;

    # Testing for FQDN
    if [[ $_vl -ge 4 || ( $_vl -eq 0 && "${vars[@]}" =~ "hostname" ) ]]; then
        status "Checking FQDN";
        local _hostTLDcount=$(($(echo ${HOSTNAME##*\.}|wc -c)-1))
        if [[ $(echo ${HOSTNAME}|sed 's/[^\.]//g'|wc -m) -lt 2 || $_hostTLDcount -gt 4 || $_hostTLDcount -lt 2 ]]; then
            hostname="$hostname - \e[0;36mNot a FQDN\e[0;m";
        fi;
    fi;


    # Check if hostname resolves
    if [[ $_vl -ge 4 || ( $_vl -eq 0 && "${vars[@]}" =~ "hostname" ) ]]; then
        if [[ ! $_stype == "s" ]]; then
            status "Looking for hostname resolution";
            [[ $(which dig) && $(dig ${HOSTNAME} +short +time=2 +tries=2 2>/dev/null) != ${ipaddr} ]] && hostname="${hostname} - \033[36mResolution Failure\033[0m";
        fi;
    fi;


    # Check pwtemp set
    if [[ $_vl -ge 3 || ( $_vl -eq 0 && "${vars[@]}" =~ "pwtemp" ) ]]; then
        status "Checking pwtemp'd users";
        [[ -d /root/.hgtogglehash ]] && pwtemp="$(\ls /root/.hgtogglehash/|grep -v '\.'|sort -u|awk '{printf("%s, ",$1);if(NR%6==0)printf("\n                ");}'|sed -e's/[\ ]*$//g' -e's/\,$//')";
    fi;


    # Get VZ version
    if [[ $_vl -ge 3 || ( $_vl -eq 0 && "${vars[@]}" =~ "vz" ) ]]; then
        if [[ $_stype == "h" ]]; then
            status "Checking VZ version";
            vz="$(vzctl --version|sed 's/vzctl v\.//')";
        fi;
    fi;


    # Check vz shared memory
    if [[ $_vl -ge 3 || ( $_vl -eq 0 && "${vars[@]}" =~ "vz_shm" ) ]]; then
        if [[ $_stype == "v" ]]; then
            status "Checking shared memory";
            vz_shm=$(awk '/shmpages/{c=($2*4)/1024;m=($4*4)/1024;printf("%i%% - \033[36m%i\033[0m/\033[36m%i\033[0m MB used\n",(c/m)*100,c,m);}' /proc/user_beancounters 2>/dev/null);
        fi;
    fi;

    # Check shared memory usage on non-vz machines
    if [[ $_vl -ge 3 || ( $_vl -eq 0 && "${vars[@]}" =~ "shmem" ) ]]; then
        if [[ ! $_stype == "v" ]]; then
            status "Checking shared memory";
            _shm="$(awk '/Shmem:/{printf("%.2f",$2/1024)}' /proc/meminfo)";
            [[ ${_shm} && ! ${_shm} == "0.00" ]] && shmem="${_shm} MB";
        fi;
    fi;


    # Test for disks full, inodes, and read-only
    if [[ $_vl -ge 2 || ( $_vl -eq 0 && "${vars[@]}" =~ "diskwarn" ) ]]; then
        status "Checking disk status";
        diskwarn1="$(df -P 2>/dev/null|sed '2,/Fi/!d'|awk '{sub(/%/,"",$5); if ($5 >= 95) {print "\033[1m"$6,"\033[0m("$1") is \033[0;36m"$5"% \033[0mfull";} }'|sed -e'1! s/^/                /')";
        diskwarn2="$(df -iP 2>/dev/null|sed '2,/Fi/!d'|awk '{sub(/%/,"",$5); if ($5 >= 95) {print "\033[1m"$6,"\033[0m("$1") has \033[0;36m"$5"% \033[0minode consumption";} }'|sed -e'1! s/^/                /')";
        if [[ ! $_stype == "v" && ! ( $_stype == "s" && $_dc == "p" ) ]]; then
            #local _mnts="$(awk '!/\/virtfs/&&($4~/ro$/||$4~/ro\,/){printf("\033[1m%s\033[0m (%s)\n",$2,$1);}' /proc/mounts)";
            local _mnts="$(awk '!/\/virtfs/&&!($2=="/home"&&$1=="tmpfs")&&($4~/ro$/||$4~/ro\,/){printf("\033[1m%s\033[0m (%s)\n",$2,$1);}' /proc/mounts)";
            if [[ $_mnts ]]; then
                diskwarn3="${_mnts} may be \e[1;36mread-only\e[0m";
            fi;
        fi;
    fi;

    # Test exim
    if [[ $_vl -ge 4 || ( $_vl -eq 0 && "${vars[@]}" =~ "exim" ) ]]; then
        if [[ $_ctype == "c" ]]; then
            status "Checking exim";
#            exim="$( (exim --version && ps aux)| awk '/^Exim/&&/version/{printf("%s",$3)}/sbin\/exim/&&!/awk/{c++;if(c==1)t=$9}END{if(c>0)printf(" - Pids:%s - Runtime:%s",c,t);}')";
            #exim="$( (exim --version && ps -eo "%U %c %t"|tac)| awk '/^Exim/&&/version/{printf("%s",$3)}/exim/&&(/mailnull/||/root/){c++;if(c==1)t=$3}END{if(c>0)printf(" - Pids:%s - Runtime:%s",c,t);else printf(" - Not Running");}')";
            [[ -x /usr/sbin/exim ]] && exim="$(/usr/sbin/exim --version 2>/dev/null|awk '/^Exim/&&/version/{printf("%s",$3)}')";
            if [[ $(/sbin/pidof exim 2>/dev/null) ]]; then
                #exim="$exim $(ps -p "$(pidof exim)" -o etime|awk 'NR>1{c++;t=0;FS="[ :-]";t+=$(NF);t+=((NF-1)>=0&&$(NF-1)*60);if((NF-2)>=0&&$(NF-2)~/^[0-9]/)t+=($(NF-2)*3600);if((NF-3)>=0&&$(NF-3)~/^[0-9]/)t+=($(NF-3)*86400);if(t>w){w=t;r=$0}}END{printf("- Pids:%s - Runtime:%s",c,r);}')"
                exim="$exim $(ps -C exim -o etime|awk 'function s2s(z){if(z~/-/){split(z,p,"-");d=p[1];h=p[2];}else h=$0;split(h,a,":");if(length(a)==2)s=a[1]*60+a[2];else if(length(a)==3)s=a[1]*3600+a[2]*60+a[3];if(d>0)s+=(d*86400);return s}!/ELAPSED/{c++;t=s2s($1);if(t>w){w=t;r=$1}}END{printf("- Pids:%s - Runtime:%s",c,r);}' 2>/dev/null)"
                _exiq="$(/usr/sbin/exim -bpc)";
                [[ $_exiq -gt 2000 ]] && _exiq="\e[0;36m$_exiq\e[0m";
                exim="$exim - Q:$_exiq";
                [[ -e /etc/mailips && $(stat -c %s /etc/mailips) -gt 0 ]] && exim="$exim - \e[0;36mDediIPs\e[0m";
            elif [[ -e /etc/eximdisable ]]; then
                exim="\e[0;36mDisabled\e[0m";
            else
                exim="\e[0;36mNot Running\e[0m";
            fi;
        fi;
    fi;

    # Check for mongrel_rails/ruby
    if [[ $_vl -ge 5 || ( $_vl -eq 0 && "${vars[@]}" =~ "mongrel_rails" ) ]]; then
        if [[ ! $_stype == "h" && ! $_ctype == "p" ]]; then
            status "Checking for Mongrel servers";
            mongrel_rails="$(ps -C mongrel_rails -ouser=|sort -u|tr '\n' ' ')";
        fi;
    fi;


    # Check postfix
    if [[ $_vl -ge 4 || ( $_vl -eq 0 && "${vars[@]}" =~ "postfix" ) ]]; then
        if [[ ${USER} == "root" && ! $_stype == "h" ]]; then
            status "Checking postfix";
            if  [[ ! $exim || $exim == "\e[0;36mNot Running\e[0m" ]]; then
                if [[ $(/sbin/pidof master 2>/dev/null) ]]; then
                    postfix="$(postconf -d|grep -Po '(?<=^mail_version\ \=\ ).*' 2>/dev/null)";
                    postfix="$postfix $(ps -C master -o etime|awk 'function s2s(z){if(z~/-/){split(z,p,"-");d=p[1];h=p[2];}else h=$0;split(h,a,":");if(length(a)==2)s=a[1]*60+a[2];else if(length(a)==3)s=a[1]*3600+a[2]*60+a[3];if(d>0)s+=(d*86400);return s}!/ELAPSED/{c++;t=s2s($1);if(t>w){w=t;r=$1}}END{printf("- Pids:%s - Runtime:%s",c,r);}' 2>/dev/null)";
                    #_postfixq="$(postqueue -p 2>/dev/null|tail -n1|cut -d\  -f5)";
                    _postfixq="$(find $(postconf -h queue_directory 2>/dev/null) -type f 2>/dev/null|wc -l)";
                    if [[ ! $_postfixq ]]; then
                        _postfixq=0;
                    elif [[ $_postfixq -gt 2000 ]]; then
                        _postfixq="\e[0;36m$_postfixq\e[0m";
                    fi;
                    postfix="$postfix - Q:$_postfixq";
                else
                    postfix="\e[0;36mNot Running\e[0m";
                fi;
            fi;
        fi;
    fi;


    # Check Exim Domains
    if [[ $_vl -ge 4 || ( $_vl -eq 0 && "${vars[@]}" =~ "exim_domains" ) ]]; then
        if [[ $_ctype == "c" ]]; then
            status "Checking for exim domains duplicates"
            if [[ -e /etc/remotedomains && /etc/localdomains ]]; then
                exim_domains="$(comm -1 -2 <(sort /etc/localdomains) <(sort /etc/remotedomains)|grep -v '^$'|tr '\n' ','|sed -e's/\,$/\n/' -e's/\,/\,\ /g')";
            fi;
        fi;
    fi;

    # Check cPanel cert expiry
    if [[ $_vl -ge 5 || ( $_vl -eq 0 && "${vars[@]}" =~ "cp_ssl" ) ]]; then
        if [[ $_ctype == "c" ]]; then
            status "Check cPanel SSL certificate expiry"
            if [[ -e /var/cpanel/ssl/cpanel/cpanel.pem ]]; then
                cp_ssl="$(echo "$(openssl x509 -noout -in /var/cpanel/ssl/cpanel/cpanel.pem -enddate)"|awk -F'=' '{print $2}')";
            elif [[ -e /etc/ssl/certs/${HOSTNAME}.crt ]]; then
                cp_ssl="$(echo "$(openssl x509 -noout -in /etc/ssl/certs/${HOSTNAME}.crt -enddate)"|awk -F'=' '{print $2}')";
            fi;
            if [[ $cp_ssl ]]; then
                _cp_ssl_date=$(date -d"${cp_ssl}" +%s);
                if [[ $_cp_ssl_date -le $epoch ]]; then
                    cp_ssl="${cp_ssl} - \e[36mExpired\e[0m";
                elif [[ $(($_cp_ssl_date - 1209600)) -le $epoch ]]; then 
                    cp_ssl="${cp_ssl} - \e[36m2 week expiry warning\e[0m";
                fi;
            fi;
        fi;
    fi;


    # Check cPanel uptime
    if [[ $_vl -ge 5 || ( $_vl -eq 0 && "${vars[@]}" =~ "cp_uptime" ) ]]; then
        if [[ $_ctype == "c" ]]; then
            status "Checking cPanel uptime";
            cp_uptime="$(ps -C cpsrvd-ssl -C cpsrvd -o etime|awk 'function s2s(z){if(z~/-/){split(z,p,"-");d=p[1];h=p[2];}else h=$0;split(h,a,":");if(length(a)==2)s=a[1]*60+a[2];else if(length(a)==3)s=a[1]*3600+a[2]*60+a[3];if(d>0)s+=(d*86400);return s}!/ELAPSED/{c++;t=s2s($1);if(t>w){w=t;r=$1}}END{if(c>0)printf("Up - Runtime:%s",r);else printf("\033[36mNot Running\033[0m");}' 2>/dev/null)";
            _cplogins=$(grep -l pass= /var/cpanel/sessions/raw/* 2>/dev/null|sort -ut\: -k1,1|sed 's/\:.*//;s/.*\///;/^$/d'|wc -l);
            [[ ${_cplogins} -gt 0 ]] && cp_uptime="${cp_uptime} - Logins:${_cplogins}";
        fi;
    fi;

    # Check screen sessions
    if [[ $_vl -ge 4 || ( $_vl -eq 0 && "${vars[@]}" =~ "screen" ) ]]; then
        status "Checking screen sessions";
        #screen=$(screen -ls|awk -F'[\t .]' '$0~/^\t/{if(c>0)printf(", ");printf("%s",$3);c++;}');
        screen="$(ps -C bash e|awk '/TERM=screen/&&!/SHLVL\=0/{for(i=1;i<=NF;i++){if($i~/^RUSER=/){ru=$i;sub(/^RUSER=/,"",ru)}if($i~/^STY=/){st=$i;sub(/^STY=[0-9]*\./,"",st)}if(ru||st)sty[st]=ru;}}END{for(user in sty){if(c>0)printf(", ");printf("%s(%s)",user,sty[user]);c++}}')";
    fi;


    #Check for bad fstab syntax in provo boxes
    if [[ $_vl -ge 3 || ( $_vl -eq 0 && "${vars[@]}" =~ "fstab" ) ]]; then
        if [[ $_dc == "p" ]]; then
            #if [[ -e /etc/fstab && $(awk 'NF!=6&&$1!~/^(\#|[\t ]*$)/' /etc/fstab) ]]; then
            if [[ -e /etc/fstab && $(awk '$1!~/^(\#|[\t ]*$)/&&!(NF=6||$5~/^[0-9]+$/||$6~/^[012]$/||$2~/(^\/|swap)/)||($2=="/"&&$4!~/noatime/)' /etc/fstab) ]]; then
                fstab="\033[36mBad syntax\033[0m";
            fi;
        fi;
    fi;


    # Check server hardware
    if [[ $_vl -ge 5 || ( $_vl -eq 0 && "${vars[@]}" =~ "hw_sys" ) ]]; then
        if [[ ! $_stype == "v" && ! $_dc == "p" ]]; then
            status "Checking system hardware spec";
            hw_sys="$(dmidecode -s system-manufacturer) $(dmidecode -s system-product-name) ($(dmidecode -s baseboard-manufacturer) $(dmidecode -s baseboard-product-name))";
        fi;
    fi;


    #Test for uksm on conroe boxes
    if [[ $_vl -ge 4 || ( $_vl -eq 0 && "${vars[@]}" =~ "uksm" ) ]]; then
        status "Checking for enabled uksm";
        if [[ $_stype == "s" && $_corecount == 2 && -e /sys/kernel/mm/uksm/run && $(cat /sys/kernel/mm/uksm/run) == 1 ]]; then
            uksm="\e[36mOn\e[0m";
        fi;
    fi;

    # Check for vzmigrations
    if [[ $_vl -ge 4 || ( $_vl -eq 0 && "${vars[@]}" =~ "vz_migrate" ) ]]; then
        status "Checking VZ migrations";
        if [[ $_stype == "h" ]]; then
            vz_migrate="$(ps ax|sed -ne'/vps[0-9]*\.hostgator\.comvps[0-9]*/s/\.hostgator\.com/\ \-\>\ /p' -e'1d' -e's/vps[0-9]*/\\033[0;36m&\\033[0m/g')";
    
        fi;
    fi;

    # Check NIC link speed
    if [[ $_vl -ge 5 || ( $_vl -eq 0 && "${vars[@]}" =~ "net_link" ) ]]; then
        if [[ ! $_stype == "v" ]]; then 
            status "Checking NIC link speed";
            #[[ -x /sbin/mii-tool ]] && net_link="$(awk '/ok$/{gsub(",","",$3);print $3;exit}' <<<$(mii-tool eth0 eth1 2>/dev/null))";
            [[ -x /sbin/mii-tool ]] && net_link="$(echo "$(mii-tool eth0 eth1 2>/dev/null)"|awk '/ok$/{for(q=1;q<=NF;q++)if($q~/^1/){gsub(",","",$q);print $q;exit}}')";
        fi;
    fi;

    # Check disk schedulers
    if [[ $_vl -ge 5 || ( $_vl -eq 0 && "${vars[@]}" =~ "io_scheduler" ) ]]; then
        status "Checking IO scheduler";
        if [[ $(\ls -d /sys/block/[shv]d* 2>/dev/null) ]]; then
            io_scheduler=$(for dr in /sys/block/[shv]d*;do echo -n "[${dr##*/}] ";cat ${dr}/queue/scheduler;done|awk -F'[][]' '{if(NR!=1)printf("                ");printf("/dev/%s: %s\n",$2,$4)}');
        fi;
        if [[ $io_scheduler && $_stype == "s" && $_dc == "p" ]]; then
            io_scheduler="$(printf "%b" "${io_scheduler}"|awk '{sub(/^[[:space:]]*/,"",$0);sub(/^\/dev\//,"",$0);if(NR%2==0)printf("\t%s\n",$0);else{if(NR!=1)printf("%16s"," ");printf("%s",$0)}}')";  
        fi;
    fi; 

    # Check bam
    if [[ $_vl -ge 4 || ( $_vl -eq 0 && "${vars[@]}" =~ "bam" ) ]]; then
        status "Checking for bam"
        _bamcount=$(iptables -L bam 2>/dev/null|grep ^badguys|wc -l);
        if [[ ${_bamcount} -gt 0 ]]; then
            bam="\033[36mEnabled\033[0m - Rules:${_bamcount}";
            if [[ -e /proc/net/xt_recent/badlist ]]; then
                bam="${bam} - Badlist:$(wc -l /proc/net/xt_recent/badlist|cut -d\  -f1)";
            fi;
            if [[ -e /proc/net/xt_recent/badish ]]; then
                bam="${bam} - Badish:$(wc -l /proc/net/xt_recent/badish|cut -d\  -f1)";
            fi;
        fi;
    fi;

    # Get FTP version
    if [[ $_vl -ge 4 || ( $_vl -eq 0 && "${vars[@]}" =~ "ftp" ) ]]; then
        status "Checking pure-ftpd";
        if [[ -x /usr/sbin/pure-ftpd ]]; then
            ftp="$(pure-ftpd --help|awk 'NR==1{sub(/^v/,"",$2);print $2'}) - Pids:$(/sbin/pidof pure-ftpd 2>/dev/null|wc -w) - Runtime:$(ps -p$(/sbin/pidof -s pure-ftpd 2>/dev/null) -o'%t' --no-header 2>/dev/null|awk '{print $1}')";
        fi;
    fi;
            

    # Check that kernel has stuffs for FTP PASV mode
    if [[ $_vl -ge 4 || ( $_vl -eq 0 && "${vars[@]}" =~ "ftp_pasv" ) ]]; then
        if [[ $_stype == "d" ]];then
            status "Checking for FTP PASV compatibility"
            [[ ! $(lsmod|grep -E '(ip|nf)_conntrack_ftp') ]] && ftp_pasv="*_conntrack_ftp not found";
        fi;
    fi;

    # Check for shared migration
    if [[ $_vl -ge 3 || ( $_vl -eq 0 && "${vars[@]}" =~ "shared_mig" ) ]]; then
        if [[ $_stype == "s" && -e /etc/migrateddomains ]]; then
            status "Checking for shared migration";
            shared_mig="\033[1;36mMigration in progress\033[0m: $(wc -l /etc/userdomains /etc/migrateddomains|awk '$2~/user/{t=$1}$2~/migrated/{c=$1}END{printf("%i/%i - %.1f%%\n",c,t,(c/t*100))}')";
        fi;
    fi;

    # Check for reseller migration
    if [[ $_vl -ge 3 || ( $_vl -eq 0 && "${vars[@]}" =~ "reseller_mig" ) ]]; then
        if [[ $_stype == "s" ]]; then
            status "Checking for reseller migration";
            #reseller_mig=$(ps -C rsync e|grep 'HOME=\/root'|grep -oP '(?<=SSH_CLIENT=).*?(?=\ )'|sort -u|head);
            _reseller_mig=$(ps -C rsync3 -C rsync e|grep 'rsync.*\. \/home\/.*HOME=\/root'|grep -oP '(?<=SSH_CLIENT=).*?(?=\ )'|sort -u|head -1);
            if [[ ${_reseller_mig} ]]; then 
                reseller_mig="\033[1;36mMigration in progress\033[0m: $(\dig +short -x ${_reseller_mig} +time=1 +tries=1|sed 's/\..*//g') (${_reseller_mig})";
            fi;
        fi;
    fi;

    # Count reboot in past 30 days
    if [[ $_vl -ge 4 || ( $_vl -eq 0 && "${vars[@]}" =~ "uptime" ) ]]; then
        if [[ $_stype == "s" || $(rpm -q sysvinit-tools 2>/dev/null|grep -v 'not installed') ]]; then
            status "Counting recent reboots"
            _rebootCount=$(t=0;last reboot -Fn100|awk '$1=="reboot"{print $6,$7,$8,$9}'|while read d;do ddd=$(date -d"${d}" +"%s");if [[ ${ddd} -gt $(($(date +"%s")-2592000)) ]];then echo $((++t));fi;done|tail -1);
            [[ ${_rebootCount} -gt 3 ]] && _rebootCount="\033[36m${_rebootCount}\033[0m";
            [[ $_rebootCount ]] && uptime="${uptime} - Reboots in 30 days: ${_rebootCount}";
        fi;
    fi;



    # Look for VZ beans 
    if [[ $_vl -ge 4 || ( $_vl -eq 0 && "${vars[@]}" =~ "vps_beans" ) ]]; then
        status "Checking VZ beans";
        if [[ $_stype == "v" && -r /proc/user_beancounters && ${USER} == "root" ]]; then { 
            vps_numfile=$(grep numfile /proc/user_beancounters 2>/dev/null| awk '{print $5}');
            vps_kmemsize=$(grep kmemsize /proc/user_beancounters 2>/dev/null| awk '{print $6}');
            vps_privvmpages=$(grep privvmpages /proc/user_beancounters 2>/dev/null| awk '{print $5}');
            [[ $vps_kmemsize -lt 104857600 ]] && vpslimit1="$vps_kmemsize kmemsize (Under)";
            [[ $vps_kmemsize -gt 1000000000 ]] && vpslimit1="kmemsize unset";
            [[ $vps_privvmpages -lt 1500000 ]] && vpslimit2="$vps_privvmpages privvmpages (Under)";
            [[ $vps_privvmpages -gt 1000000000 ]] && vpslimit2="privvmpages unset";
            [[ $vps_numfile -lt 50000 ]] && vpslimit3="$vps_numfile numfile (Under)";
            [[ $vps_numfile -gt 1000000000 ]] && vpslimit3="numfile unset";
        } fi;
        [[ $_stype == "v" ]] && vps_beans=$(grep -vE '0$|^Ver|uid' /proc/user_beancounters|sed 's/.*\://'|awk '{print "\033[36m" $1 "\033[0m"}'|tr '\n' ','|sed -e's/\,$/\n/' -e's/\,/\,\ /g');
    fi;

    # Check for processes possibly vulnerable to heartbleed
    if [[ $_vl -ge 3 || ( $_vl -eq 0 && "${vars[@]}" =~ "heartbleed" ) ]]; then
        if [[ ! $_stype == "s" ]]; then
            status "Checking for possible heartbleed vulnerability";
            #heartbleed="$(if [[ $(awk '!($3<6||$3>=7)' /etc/redhat-release) ]]; then v=$(rpm -q openssl --changelog|grep CVE-2014-0160);[[ ! ${v} || ( ${v} && $(nice -n-19 lsof -n|awk '/libssl/&&/DEL|deleted/') ) ]] && echo -e '\e[1;36mPossibly vulnerable\e[0m';fi;)";
            heartbleed="$(if [[ $(openssl version|awk -F'[ .-]' '$2==1&&$3==0&&$4~/^1/&&$4~/[^g-z]$/{print "Vulnerable version"}') ]]; then v=$(rpm -q openssl --changelog|grep CVE-2014-0160);[[ ! ${v} || ( ${v} && $(nice -n-19 lsof -n|awk '/libssl/&&/DEL|deleted/') ) ]] && echo -e '\e[1;36mPossibly vulnerable\e[0m';fi;)";
        fi;
    fi;
}


# Clear the header/counter/progress/thingy
wipe() {
    if [[ ! $_debug && ! $_output ]]; then
        echo -e "\e[3A";
        for i in {1..4}; do 
            echo -e "\r\e[K";
        done;
        echo -e "\e[5A";
    elif [[ ! $_output ]]; then
        echo;
    fi;
}


# Show all the data we've collected
displayInfo() {
    _dispStuff="heartbleed|vz_cp|panel|shared_mig|reseller_mig|billing|last_user|dedi_migrate|users";
    [[ ! $_output ]] && echo -ne "\e[0;m" >&2;

    if [[ ! $vars ]]; then
        vars=( ${_defvars[@]} );
    fi;
    if [[ $_output == "json" || $1 == "json" ]]; then
        vars=( epoch ${vars[@]} );
    fi;

    for var in "${vars[@]}"; do
        if [[ $_output == "env" || $1 == "env" ]]; then
            # Output to env variables
            if [[ ${!var} ]]; then
                printf "SI_%s=\"%b\";\n" "$(echo ${var}|tr '[a-z]' '[A-Z]')" "$(echo "${!var}"|sed -e's/^[ \t]*//g'|tr '\n' ' '|sed 's/\ $//')";
            fi;
        elif [[ $_output == "json" || $1 == "json" ]]; then
            # JSON compatible output
            if [[ ${!var} ]]; then
                if [[ ! $_doingjson ]]; then
                    printf '{';
                    _doingjson="1";
                fi;
                printf "\"%s\":\"%b\", " "${var}" "$(echo "${!var}"|sed -e's/^[ \t]*//g'|tr '\n' ' '|sed 's/\ $//')";
            fi;
        else
            # Normal output
            [[ ${!var} ]] && printf '%14s: %b\n' "${var%%[1-9]*}" "${!var}";
            [[ ! $sbit && $var =~ $_dispStuff ]] && { sbit=1; echo; };
        fi;
    done;
    [[ ! $_output ]] && echo;
}


########  Main  ########
st="$(date +%s)";
renice -5 -p $$ >/dev/null 2>&1;
trap sadFace INT
getOpts "$@";
waiting >&2;
getInfo;
wipe >&2;
output="$(displayInfo)";
if [[ $_logging && -w ${_silogloc%/*} ]]; then
    oj="$(displayInfo json)";
    oj="$(echo $oj|sed -e's/,\ $//' -e's/,$//' -e's/\o033\[[0-9]*;[0-9]*m//g' -e's/\o033\[[0-9]*m//g')}";
    echo "$oj" >> ${_silogloc} 2>/dev/null;
fi;
if [[ $_logging == "auto-prune" && -w ${_silogloc} ]]; then
    if [[ $(stat -c%s ${_silogloc}) -gt 160000 ]]; then
        tail -n2 ${_silogloc} > ${_silogloc}.new 2>/dev/null;
        rm -f ${_silogloc} 2>/dev/null;
        mv ${_silogloc}.new ${_silogloc} 2>/dev/null;
    fi;
fi;


[[ $_output == "json" ]] && output="$(echo $output|sed -e's/,\ $//' -e's/,$//')}";

[[ $_1337 ]] && output=$(echo "$output"|sed -e's/[oO]/0/g' -e's/[Ee]/3/g' -e's/[Ss]/5/g' -e's/[iIl]/1/g' -e's/\%/\ of 1oO/g' -e's/a/A/g' -e's/h/H/g' -e's/[F]/pH/g' -e's/[tTV]/7/g');
[[ $_nocolour ]] && output=$(echo "$output"|sed -e's/\o033\[[0-9]*;[0-9]*m//g' -e's/\o033\[[0-9]*m//g');

echo -n "$output"|sed 's/,\ $//';
if [[ $_timer || $_debug ]]; then
    et="$(date +%s)";
    echo;
    echo "  Elapsed time: $(((et-st)/60))m $(((et-st)%60))s";
fi;
[[ ! $_output ]] && echo && echo;
set +x;
